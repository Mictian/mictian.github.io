<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Working with jmtpfs</title>
      <link href="/2018/07/24/2018-07-26-working-with-jmtpfs/"/>
      <url>/2018/07/24/2018-07-26-working-with-jmtpfs/</url>
      <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This post is aimed to two different sets of people; those that are looking for a way to copy/transfer files from their computers to their cellphones and those that are trying to do that and are facing errors using jmtpfs.</p><p>If you are in one of those groups, this post is for you. Please continue reading.</p><p>NOTE: I am using Debian Linux (stretch)</p><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p>I am explicity describing these steps here as it took me a while to realize some very simple/stupid details.</p><ol><li><strong>Install jmtpfs</strong></li></ol><p>This is as simple as:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install jmtpfs</span><br></pre></td></tr></table></figure></p><ol start="2"><li><strong>Connect your device</strong></li></ol><p>Connect your Andriod device (actually this should work with any mtp-capable device).   \<br>Unlock it!. Although this steps is quite obvious, when you forget it then you will need to unmount the specified folder manually (see next steps).</p><ol start="3"><li><strong>Mount your device</strong></li></ol><p>Execute:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmtpfs ~/tmp</span><br></pre></td></tr></table></figure></p><p>Assuming that the folder ~/tmp is empty.</p><p>You should receive an outpupt similiar to this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Device 0 (VID=2e04 and PID=c025) is UNKNOWN <span class="keyword">in</span> libmtp v1.1.13.</span><br><span class="line">Please report this VID/PID and the device model to the libmtp development team</span><br><span class="line">Android device detected, assigning default bug flags</span><br></pre></td></tr></table></figure></p><p><strong>IMPORTANT</strong>: Make sure that you do not have an alias for <code>rm</code>.   \<br>It took me hours to realize that when I was trying to delete a file or a folder I was unable to do so because I was actually trying to move it to the trash, and this was giving errors.   \<br>I have an alias for <code>rm</code> to use <code>trash</code>. For the sake of the connected device just remove the alias temporally.</p><p>Finnaly take into account that if you are using a Gui file explorer like thunar, those programs tend to automatically send deleted file to the trash (or internally use rm command).</p><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>Finally, if you are experiencying other problems use <code>-d</code> when mounting the device. This option is to <strong>d</strong>ebug. What it does is to output on the console what it is doing.</p><p>If you encounter any problem transfering files from Linux to your device and want some help, let me know, write a comment :D.</p>]]></content>
      
      
        <tags>
            
            <tag> linux jmtpfs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Lessons learned moving to Microservices</title>
      <link href="/2018/07/11/2018-07-11-lessons-learned-moving-to-microservices/"/>
      <url>/2018/07/11/2018-07-11-lessons-learned-moving-to-microservices/</url>
      <content type="html"><![CDATA[<h1 id="Leasons-learned-migrating-to-Microservices"><a href="#Leasons-learned-migrating-to-Microservices" class="headerlink" title="Leasons learned migrating to Microservices"></a>Leasons learned migrating to Microservices</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This post is a small recap of things that I have observed after working in many projects that moved monolithic applications into microservices architectures, and my grain of salt trying to help.</p><p>Before start talking about what have been my experience so far, let first recap the things that we must “suffer” or the things that we must understand in order to move to micro-services.</p><h3 id="Why-microservices"><a href="#Why-microservices" class="headerlink" title="Why microservices"></a>Why microservices</h3><p>(1) My first learned lesson was that <strong>the entire company must have a common understanding of why we are moving to a different architectural pattern.</strong></p><p>The first question that you must ask to yourself is <strong>why we want to move to a microservices architecture?</strong>.<br>If in your answer you are not describing a business problem, then your are destined to failure (perhaps not so dramatically). It seems that in IT companies engineers tends to forget the reason why companies exists: To solve a customer problem using software as a means to an end.</p><p>Althoug this is obvious and at first nonessential, the main idea is to keep business needs and engineering as one aligned team in wich all members are trying to solve the same problem.</p><p>To emphasize the difference between technical needs and business needs, let just list some common examples:</p><ul><li><em>Scale</em>: In this case the needs should be something like “Based on our plans of expansion, or our growth rate, we see a need to scale our current infrastructure”, if on the other hand you describe your need as “our server’s CPU is at 80% in average, so we need to find a solution” you probably are not listening to the right bell.</li></ul><ul><li><em>Move fast</em>: “We need to rebuild our current monolithic so we will be able to generate better tracing of our app”.<br>Again, not backed by any direct business value. Do you know for sure that adding better tracing or being prepare to troubleshoot an error in production is valuable from the business point of view? Without a doubt from the technical point of view this statement is trying to improve the infrastructure, but without business alignment you don’t know if the company is planning to sell that part of the business.</li></ul><ul><li><em>Maintenance cost</em>: Believe it or not, ethical or not, there are companies that depends on high maintenance costs to subsist, so improving the code base can actually be harmful (let leave the ethical discussion for another occation - there are plenty of reasons why I am not a director/manager).</li></ul><p>Please, do not take this as a way to express or describe a problem, but rather as a recommendation to see if your journey into microservices has the right reasons to start. Otherwise, in my experience, you will face uncountable discussions between managment and engineering.<br>I, as an engineer, totally understand the value of having a better code; from less maintenance cost to greater speed to develeop new features. But make sure that business guys in your organization see the value aswell.</p><h2 id="How-to-reach-it"><a href="#How-to-reach-it" class="headerlink" title="How to reach it"></a>How to reach it</h2><p>In the introduction section I used the word “suffer”, and the reason of that is because it is common that teams in charge of starting this transition do this as an engineering exercise.<br>(2) My second lesson was that <strong>whoever is responsible to start the microservices transition should try their best to no over-engineering the problem at hand.</strong></p><p>In a few words I would answer this section just saying: Developing an MVP as in any other product. The fact that we are describing an architectural pattern does not mean that we need to build the world to be able to have some value back.</p><p>One common mistake that I have observed more than once is, teams trying to solve all problem at once.<br>For example, while creating the first services also develop a “framework” so future services will be easy to develop. Create a generic deployment infrastructure so other teams can make the transition more easily to the “new” source code.<br>I could continue writing sentences on how teams try to justify their overwork and over-engineering efforts, but based on my experience teams ended up chasing ghosts; solving no one problems, refactoring the code over and over again without really adding value.<br>So, my recommendation here is, without forgetting what you will need to do next, keep the focus. Develop the framework later, once that you understand what are the pieces of it.<br>At the beginning it will be enough to just have a shared list of ideas, tentative components that could be extracted as generic, lessons learned in the process so far, or whatever thing you consider valueble to write down.</p><p>This will start to sound repetitive, but the key is: alignment. What is the problem that we are solving? What are we proving? Ok, implement or prove that.</p><p>A final observation in this lesson is to not forget how to develop software. Although it sounds stupid, but it is quite interesting to see companies that start planing microservices infrastructure going layer by layer.<br>First, defining the database schema, then the business logic, and once that is all in place plan how and when do the UI.</p><p>(3) Related with the next point, culture, I have learned, specially in companies with friction towards changes, that <strong>changes needs to be done in small steps.</strong><br>When start planning for a first MVP, join only the minimun amount of people needed for the job. Start simple, one team and one clear goal. Later on, the rest of the company will follow.<br>Otherwise you will ended up distracting other parts of the organization, generating noise in sectors that should be working business as usual.</p><p>Assume that the process will take time and pushing it wont help.</p><h2 id="Culture"><a href="#Culture" class="headerlink" title="Culture"></a>Culture</h2><p>This tends to be one of the most misunderstood points, and sometimes rooted in the fragmented vision of the different roles inside a company.<br>Given one company and one product, we should see one team with one vision. (clearly by one team I do not mean one scrum team, but rather a unified big group of people working towards the same solution)</p><p>(4) My fourth lesson is that <strong>not all campanies are mature enough, in terms of agile processes, to move to a microservices architecture.</strong></p><p>In the same way that in a call center it’s not possible to use waterfall (how you will predict how many calls you will receive the first day?) A company that moves to microservices needs to adhere to agile principles (It does not need clarification that this is my vision).</p><p>You will be entering in a new project with millions of unknowns, your organization does not have experience with this, the technical offering in the market is constantly changing and on top of that it will be expensive… Waterfall?<br>In fact all of those are secondary points, the main reason to follow agile principles is because they align with the organization structure that you need to have; independent and autonomous teams.</p><p>If in your company you’re a “control freak”, micro-managing people and your organization chart is more hight that wide… Well, my experience determines that you will face serious issues.</p><p>A subtle and sometimes unspoken point about how microservices scales, is that they scale by scaling the teams behind them. And by this I mean horizontally, making the hierarchical pyramid of your company higher, believe me, wont scale.</p><p>Another important phenomenon that occurs from time to time, is that stakeholders start to get existed and push the dev team. Remember that it must be a PO and he/she must have a clear role in this process.</p><p>(5) Another point that I have observed is to <strong>trust your team and let them grow (technically) in the same way that the company is growing (driver reason why you are going to microservices).</strong></p><p>It is common, specially in medium size companies, to hire “experienced” people to guide and lead the migration process.<br>Clearly, at first, this sounds as a good idea; someone with more experience must know what are the common problems and best practices, so in this way the company will save time and money.</p><p>If you understand, believe and practice agile principles, sooner than later you will see how this tends to be a bad idea.</p><p>Leaders are not impose by managers/directors,  specially technical ones. Leader are choosen by the teams.<br>Generally a team member is recognized as a such. Someone that the team trusts and knows.</p><p>If you want extra help to avoid solving the same problems the industry have already solved, create a committee with external technical advisors/consultants. Understanding that their role will be to serve the teams not the other way around.<br>Leaders must arise from the teams, otherwise they will face big communication and willingness challenges.</p><p>Trust in your team, after all they were developing the software you are using so far.</p><p>(6) <strong>Be genuine when you set your goals and use agile methodologies.</strong><br>Believing and fighting for agile principles shouldn’t be one man task.<br>If in your team you have members more concerned in showing off their impressive technical skills rather than empowering the team, instead of counting with a good developer you have a liability.<br>Or, if your PO, Scrum Master or whoever involved is more interested in using the migration project as an insignia of his/her good skills, again you are losing the focus of what you should be doing.</p><h2 id="How-to-start-technical-perspective"><a href="#How-to-start-technical-perspective" class="headerlink" title="How to start (technical perspective)"></a>How to start (technical perspective)</h2><p>In this section I wont present any technical pattern neither any revolutionary new technic, but just a few basic remarks that I have observed while helping other companies in this transition.</p><p>We all have seen the following diagram:<br><img src="/custom/img/2018-07-11-layers-diagram.png" alt=""></p><p>It is the most basic diagram and application organization that a baby can think about. And highly probably, if you depart from a monolithic, it is also at a high level your current application structure.<br>That means that you have three different places to start making the split. So far I haven’t seen a company starting by spliting their UI, so for this simple reason I will exclude it.</p><p>Important Note: The following sections assume that you are choosing one of the following strategies in the context of a business story that adds values to the final product.</p><h3 id="Data-first"><a href="#Data-first" class="headerlink" title="Data first"></a>Data first</h3><p>Examples of requirements that are good drivers to take this approach are: “by using a more secure storage we will able to comply with regulation XXX”, or “by using the DB engine XX it will allow us to execute more transactions per second and in this way serve the customers that we are expecting to have in the next quarter”.</p><p>Just a simple note in case that you reader are not a technical guy, it wont be possible to use a different DB engine without applying at least some minor changes to the Business Logic Layer, the fact the we discuss about data first is just a matter on where we are putting the focus.</p><p>(7) <strong>Unless that you are working on a rather new company, don’t think that your DB schema is well organized.</strong><br>It is just a matter of being honest, we know that most of the DBs out there are not 100% in 6th normal form, so, don’t underestimate the amount of evil joins, SQL queries, and store procedures that you have.</p><p>Try to not build a data synchronization framework. I don’t know why, lot of engineers ended up needing one. Please evaluate if it is really needed, and if that is the case (in many cases is not) try to not build a fancy one from scratch.</p><p>Finally, based on your data usage, it could be beneficial to write double and have one data souce to be read-only, allowing in this way that subsequent increments on the MVP implement read logic from this new data store.</p><h3 id="Logic-first"><a href="#Logic-first" class="headerlink" title="Logic first"></a>Logic first</h3><p>In my experience developers generally have better understanding on the code base structure than the DB schema, which could make it easy to start from splitting the logic first.</p><p>Examples of requirements that are good drivers to star from the logic are: “as we are planning to integrate with the service XXX we could use a new set of endpoints that expose the data needed, in a new service”, or “based on the new regulation of data protection we will need to implement the feature XXX which is the perfect candidate to be a new service”.</p><p>(8) <strong>Work with a PO that is an expert on the domain that you are working on”.</strong><br>The main risk when extracting pieces of logic is that you break one strange, undocumented and forgotten use case. So for this try to go step by step, using all your testing arsenal and validate every single use case migrated with your PO.<br>For the case that you are not splitting but instead just adding new functionality as services, please read the following sections.</p><h3 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h3><p>I called this section value not because the previous two didn’t added value but because we use to think (and that is great) that by taking a slice of the entire stack we will “generate more value”.<br>In this case the aim would be to split logic and data at the same time.<br>Although in the vast majority of the cases this is the selected strategy, it is not necessarily the easier to implement.</p><p>(9) <strong>The way of working while doing maintenance generally is not the same as when developing new software.</strong><br>We all agree that the focus is add business value, but in incremental steps that are achivables. I would strongly recommend to double check if this is the best approach.<br>Sometimes this strategy is selected not because it is the one that align best with the business needs, but rather because it is the most challenging one from the technical point of view, or because it is the one more close to the final “solution”.</p><p>If you conclude this is the right approach, make sure that you know your infrastructure. To split the data, perhaps using different schemas would be enough (with SQL Server), or different credentials to connect to the DB with different access rights. To split the logic using a clone instance of the current one maybe is a valid solution.<br>Im proposing these silly solutions because in this case engineers tend to go wild, creating reusable components, using cloud providers, move to dockers, etc. etc. Those not necessarily are bad solutions, if the organization is aligned and aiming to go in that direction.</p><h2 id="Migration-vs-Extension"><a href="#Migration-vs-Extension" class="headerlink" title="Migration vs Extension"></a>Migration vs Extension</h2><p>The famous question, should we refactor our current monolithic or only create new services for new functionalities?</p><p>Clearly I cannot answer that question for you, however we must agree on the following:</p><ul><li><p>Whateverr is your answer, you will need to touch the code base of your monolithic. Your current application wont start interacting with a new service/s automagically. (Yes, this assumption happens and generates lot of discussions between directors and developers).</p></li><li><p>If you are analyzing going to microservices chances are that you are facing some problems with your current code base. So, is extension-only a realistic solution?</p></li></ul><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>To finanlize this post I would like to list some points that I think are important.</p><ul><li>Although not metioned before I encourage you to give it a look at Domain Driven Design. I can be very beneficial as a tool to split your monolithic application.</li><li>Handle team and stakeholders expectations. When new projects start everybody around gets super excited.</li><li>Try, at the beginning, to forget about timelines. One sprint at a time.</li><li>Do your best to deliver small increments.</li><li>The fact that one approach worked for one problem does not mean it will work for all your use cases.</li></ul><p>I hope that you have enjoyed reading it as much as I did writing it.<br>Feel free to leave your comments below.</p>]]></content>
      
      
        <tags>
            
            <tag> microservices </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codility Lesson 04 (missing exercise)</title>
      <link href="/2016/08/30/2016-08-30-codility-lesson-4/"/>
      <url>/2016/08/30/2016-08-30-codility-lesson-4/</url>
      <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Let’s finish the final problem of the section 4.</p><h1 id="Lesson-04-a-PermCheck"><a href="#Lesson-04-a-PermCheck" class="headerlink" title="Lesson 04-a: PermCheck"></a>Lesson 04-a: PermCheck</h1><p>Problem URL: <a href="https://codility.com/programmers/task/max_counters/" target="_blank" rel="noopener">https://codility.com/programmers/task/max_counters/</a><br>Exercise URL: <a href="https://codility.com/demo/take-sample-test/max_counters/" target="_blank" rel="noopener">https://codility.com/demo/take-sample-test/max_counters/</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>A developing pattern now!! What it would be? After reading the exercise letter the first pattern that came to my mind was <a href="https://en.wikipedia.org/wiki/Command_pattern" target="_blank" rel="noopener">Command pattern</a>.<br>Clearly, there is not one-to-one relation with the pattern and the problem, but if we analize it we have a group of actions/command to execute given by the input array A and data structure over<br>which those command will take effect.<br>If you think that make sense, the command are really simple, reset the data structure (the result array) with the max founded value, and the an item of the output array.</p><p>Honestly I do not know why this problem is in the “respectable” category.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span> (<span class="params">N, A</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> counters = []</span><br><span class="line">default_value = <span class="number">0</span>,</span><br><span class="line">max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; A.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//identify 'set' command</span></span><br><span class="line"><span class="keyword">if</span> (A[i] &gt;= <span class="number">1</span> &amp;&amp; A[i] &lt;= N)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!counters[A[i]<span class="number">-1</span>])</span><br><span class="line">&#123;</span><br><span class="line">counters[A[i]<span class="number">-1</span>]= default_value + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">counters[A[i] - <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">max = <span class="built_in">Math</span>.max(max, counters[A[i]<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//identify 'reset' command</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (A[i] === N+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">// here we coult iterate over the counter array, bit I found it more performant do this iteration only once at the end.</span></span><br><span class="line">default_value = max;</span><br><span class="line">counters = [];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; N; c++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!counters[c])</span><br><span class="line">counters[c] = default_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> counters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Codility Lesson 04</title>
      <link href="/2016/08/15/2016-08-15-codility-lesson-4/"/>
      <url>/2016/08/15/2016-08-15-codility-lesson-4/</url>
      <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Counting elements!<br>It is interesting to observe how something that seems to be harmless can be really intriguing as counting elements.</p><h1 id="Lesson-04-a-PermCheck"><a href="#Lesson-04-a-PermCheck" class="headerlink" title="Lesson 04-a: PermCheck"></a>Lesson 04-a: PermCheck</h1><p>Problem URL: <a href="https://codility.com/programmers/task/perm_check/" target="_blank" rel="noopener">https://codility.com/programmers/task/perm_check/</a><br>Exercise URL: <a href="https://codility.com/demo/take-sample-test/perm_check/" target="_blank" rel="noopener">https://codility.com/demo/take-sample-test/perm_check/</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>One “relaxing” aspect of the linear restriction, not just in this particular problem but in general to time complexity, is that no one care if the final solution is O(N) or O(2N) or O(9999N) whereas it is a linear function. This does mean that you shouldn’t care about the performance, but to take note (specially if you are developing code) is that O(N) does not mean one single loop.<br>Although the problem does not say it specific we should take into account the following points; duplicated values in the input array, missing values (like #1), empty arrays and edge cases of arrays like [9999].<br>My final consideration for this problem is take present the use of auxiliary data structures. No one force us to calculate the final result without store intermediate results, particularly if you notice that the space complexity expected is O(N).<br>With all this my simple first idea was to use an auxiliary data structure to store the existence of each request value and each value is just a number we could use them as index of other array;</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span> (<span class="params">A</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> control = <span class="keyword">new</span> <span class="built_in">Array</span>(A.length);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; A.length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (A[i] &gt; A.length) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">control[A[i]<span class="number">-1</span>] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; control.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!control[j])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lesson-04-b-PermCheck"><a href="#Lesson-04-b-PermCheck" class="headerlink" title="Lesson 04-b: PermCheck"></a>Lesson 04-b: PermCheck</h1><p>Problem URL: <a href="https://codility.com/programmers/task/missing_integer/" target="_blank" rel="noopener">https://codility.com/programmers/task/missing_integer/</a><br>Exercise URL: <a href="https://codility.com/demo/take-sample-test/missing_integer/" target="_blank" rel="noopener">https://codility.com/demo/take-sample-test/missing_integer/</a></p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>I don’t think that the fact this problem comes after the previous one is a coincidence, and in fact we could use the same code structure but with a slightly different in the semantic of the auxiliary data structure (the control array). Instead of using the <strong>control</strong> array to know the present values we will use it to known the first missing one.<br>An extra consideration, in particular if we want to use the previous code, is that we will need to exclude negative values.</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span> (<span class="params">A</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> control = <span class="keyword">new</span> <span class="built_in">Array</span>(A.length);</span><br><span class="line"></span><br><span class="line">A = A.filter(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123; <span class="keyword">return</span> i &gt;=<span class="number">0</span>; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (A.length === <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> A[<span class="number">0</span>] === <span class="number">1</span> ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; A.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">control[A[i]<span class="number">-1</span>] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; control.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!control[j])</span><br><span class="line"><span class="keyword">return</span> j+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> A.length+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lesson-04-c-FrogRiverOne"><a href="#Lesson-04-c-FrogRiverOne" class="headerlink" title="Lesson 04-c: FrogRiverOne"></a>Lesson 04-c: FrogRiverOne</h1><p>Problem URL: <a href="https://codility.com/programmers/task/frog_river_one/" target="_blank" rel="noopener">https://codility.com/programmers/task/frog_river_one/</a><br>Exercise URL: <a href="https://codility.com/demo/take-sample-test/frog_river_one/" target="_blank" rel="noopener">https://codility.com/demo/take-sample-test/frog_river_one/</a></p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>A really creative problem, where the real problem is understand what is required rather finding the solution.<br>We can safely ignore the existence of a river and the measure in which leaves fall, what we need to understand how the frog move from one point to another. By jumping from one leave to the next leave (note that I did not mention the time factor). If we analyze this problem ignoring the time variable we could see that all leaves would be present when the frog needs them and in this case answering the question would be knowing the index of X in A. Besides as all leave are present the order of them does not make any sense.<br>In this case it is simple to realize that the frog will need to jump from position 1, to 2, to 3 until X, and the nice part is this is also true if the leaves are falling differed in time.<br>With this I see that our problem translate to knowing when the values from 1 to X are all present in the array A. In my case I thought as the values are number I can know it based on the sum of them. (any other way to do so would be totally valid)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span> (<span class="params">X, A</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>,</span><br><span class="line">saw_numbers = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//please do not this! be smart and remember (n*(n+1))/2 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; X; c++, sum += c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; A.length; i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (A[i] &lt;= X &amp;&amp; !saw_numbers[A[i].toString()]) &#123;</span><br><span class="line">sum -= A[i];</span><br><span class="line">saw_numbers[A[i].toString()] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sum === <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I will answer the final problem of this lesson next time… I could say that it will be for the thrill…</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Codility Lesson 03</title>
      <link href="/2016/08/08/2016-08-08-codility-lesson-3/"/>
      <url>/2016/08/08/2016-08-08-codility-lesson-3/</url>
      <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>It’s time to talk about time complexity!<br>Before start analyzing the problems and assuming you’re a new with this topic I recommend to see this <a href="https://www.youtube.com/watch?v=-Yv2qljLrns" target="_blank" rel="noopener">video</a>, and you can save this <a href="http://bigocheatsheet.com/" target="_blank" rel="noopener">link</a> in your bookmarks (yeap, I know it is the second result on Google and you can found it very easy anyway is a good resource to point to).</p><h1 id="Lesson-03-a-TapeEquilibrium"><a href="#Lesson-03-a-TapeEquilibrium" class="headerlink" title="Lesson 03-a: TapeEquilibrium"></a>Lesson 03-a: TapeEquilibrium</h1><p>Problem URL: <a href="https://codility.com/programmers/task/tape_equilibrium/" target="_blank" rel="noopener">https://codility.com/programmers/task/tape_equilibrium/</a><br>Exercise URL: <a href="https://codility.com/demo/take-sample-test/tape_equilibrium/" target="_blank" rel="noopener">https://codility.com/demo/take-sample-test/tape_equilibrium/</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>If we analyze the provided example we could see that for each value of P there are two sums, the one up to the P minus one position and the one starting at P position. And what is returned is the difference between this two sums.<br>Clearly summing all values of A for each possible P will never result in a O(N) solution. Thankfully we don’t need to do so as the sum of all the values of A is always the same and just with it we calculate the rest at the same time we calculate each sum given P.<br>In other words, we know Sum(A[P-1]), initially A[0], we know the Sum(A), so calculate the diff for P is just a matter of Sum(A) - (Sum(A[P-1]) + A[P]). But!, this difference is not being sum into Sum(A) so we need to remove it from Sum(A).</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">A</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> minDiff = <span class="built_in">Number</span>.MAX_VALUE,</span><br><span class="line">current_diff,</span><br><span class="line">accum = A[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = A.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">   &#125;,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; A.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">current_diff = <span class="built_in">Math</span>.abs(accum - (sum - accum));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (current_diff &lt; minDiff)</span><br><span class="line">&#123;</span><br><span class="line">minDiff = current_diff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">accum += A[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> minDiff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lesson-03-b-TapeEquilibrium"><a href="#Lesson-03-b-TapeEquilibrium" class="headerlink" title="Lesson 03-b: TapeEquilibrium"></a>Lesson 03-b: TapeEquilibrium</h1><p>Problem URL: <a href="https://codility.com/programmers/task/tape_equilibrium/" target="_blank" rel="noopener">https://codility.com/programmers/task/tape_equilibrium/</a><br>Exercise URL: <a href="https://codility.com/demo/take-sample-test/tape_equilibrium/" target="_blank" rel="noopener">https://codility.com/demo/take-sample-test/tape_equilibrium/</a></p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>This is a very simple problem. As the description says you need to provide an order 1 time complexity solution which means you will end it up generating a function (in the mathematical sense) that calculate the result without any iteration at all.<br>I can make you read lot of words, but I think the best it just see the code in this case.</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span> (<span class="params">X, Y, D</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//ceil because the frog cannot make partial steps</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.ceil((Y-X)/D);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lesson-03-c-PermMissingElem"><a href="#Lesson-03-c-PermMissingElem" class="headerlink" title="Lesson 03-c: PermMissingElem"></a>Lesson 03-c: PermMissingElem</h1><p>Problem URL: <a href="https://codility.com/programmers/task/perm_missing_elem/" target="_blank" rel="noopener">https://codility.com/programmers/task/perm_missing_elem/</a><br>Exercise URL: <a href="https://codility.com/demo/take-sample-test/perm_missing_elem/" target="_blank" rel="noopener">https://codility.com/demo/take-sample-test/perm_missing_elem/</a></p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>I must admit that my fist and rushed solution wasn’t the best. Assuming the best case scenario, sorting an array of numbers will be done in O(N log N), so I choose to first choose the array and then iterate over until I found a difference greater than 1.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">A</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A = A.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;<span class="keyword">return</span> a-b;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (A[<span class="number">0</span>]!= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; A.length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Math</span>.abs(A[i] - A[i<span class="number">-1</span>]) &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> A[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> A.length + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Although the previous code gets a 100% record on Codility it shows that I didn’t read the lesson’s material nor the problem carefully.<br>Alternatively, we can assume that all values are present, get the sum of all of them and then calculate the diff with the sum of the real present values. For the where we assume all values are present we can use the technique described in the lesson’s material and for the real sum is it just a matter of iterate over all values of A and sum them.</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span> (<span class="params">A</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> N = A.length + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> total = (N * (N+<span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">sum += A[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> total-sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Codility Lesson 02</title>
      <link href="/2016/08/02/2016-08-02-codility-lesson-2/"/>
      <url>/2016/08/02/2016-08-02-codility-lesson-2/</url>
      <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This lesson is, in theory, all about Arrays. Personally I would choose other examples in order to teach/show arrays.</p><h1 id="Lesson-02-a-CyclicRotation"><a href="#Lesson-02-a-CyclicRotation" class="headerlink" title="Lesson 02-a: CyclicRotation"></a>Lesson 02-a: CyclicRotation</h1><p>Problem URL: <a href="https://codility.com/programmers/task/cyclic_rotation/" target="_blank" rel="noopener">https://codility.com/programmers/task/cyclic_rotation/</a><br>Exercise URL: <a href="https://codility.com/demo/take-sample-test/cyclic_rotation/" target="_blank" rel="noopener">https://codility.com/demo/take-sample-test/cyclic_rotation/</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Words like “cyclic” and “rotation” makes you think in some kind of loop in where you apply a shift over the input array.<br>One millesecond later we realize that is probably not the best solution, specially because if the input K is greater than the length of the input array you will end it up calculating unnecessary shifts. For example if your array’s length is 2 and K is 4.<br>This leads us to think that we should put the focus on the require final output rather than process of how to calculated, which should be always the way to attack any problem!.   </p><p>First thing is to do is calculate how many shifts we really need to apply, in other words, the modulus of K and the A.length.<br>Finally with the updated K input, we can take the last K values from the A and added at the begging of A.</p><p>If you care, you can condier the edge case where K is 0 or A’s length is 0, cases where you dont need to do anything at all.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">A, K</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Avoid unnecessary computation</span></span><br><span class="line"><span class="keyword">if</span> (K === <span class="number">0</span> || A.length === <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (K &gt; A.length) &#123;</span><br><span class="line">    <span class="comment">//I really don't know I just did not use the modulus operator</span></span><br><span class="line">K = K - (<span class="built_in">parseInt</span>(K / A.length, <span class="number">10</span>) * A.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rest = A.splice(A.length - K, K);</span><br><span class="line"><span class="keyword">return</span> rest.concat(A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lesson-02-b-OddOccurrencesInArray"><a href="#Lesson-02-b-OddOccurrencesInArray" class="headerlink" title="Lesson 02-b: OddOccurrencesInArray"></a>Lesson 02-b: OddOccurrencesInArray</h1><p>Problem URL: <a href="https://codility.com/programmers/task/odd_occurrences_in_array/" target="_blank" rel="noopener">https://codility.com/programmers/task/odd_occurrences_in_array/</a><br>Exercise URL: <a href="https://codility.com/demo/take-sample-test/odd_occurrences_in_array/" target="_blank" rel="noopener">https://codility.com/demo/take-sample-test/odd_occurrences_in_array/</a></p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>After reading the problem my first thought was: “if all numbers are pairs and substracting pairs is 0, the reaming value is the odd one”.<br>The key point here is to realize that you dont need to do nothing special, just return that number that does not have a pair.<br>Notice that the time complexity sometimes is a limitations for our creativity, but in some cases guide us by informing us the existence of a better solution.   </p><p>So, my very simple idea was to sum all numbers and if I have already sum one particular value then remove (sum it opposite value).</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span> (<span class="params">A</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (A.length == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> A[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> multipliers = &#123;&#125;;</span><br><span class="line"><span class="keyword">return</span> A.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">acc, value</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (multipliers[value.toString()])</span><br><span class="line">&#123;</span><br><span class="line">multipliers[value.toString()]  *= <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">multipliers[value.toString()] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mult = multipliers[value.toString()];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> acc + (value * mult);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Codility lessons</title>
      <link href="/2016/07/22/2016-07-22-codility-lessons/"/>
      <url>/2016/07/22/2016-07-22-codility-lessons/</url>
      <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Sorry, I haven’t made a post since… forever!. In order to start posting more often and as I have recently discover this amazing site called<br><a href="https://codility.com/" target="_blank" rel="noopener">Codility</a> (which is kind a <a href="https://www.hackerrank.com" target="_blank" rel="noopener">HackerRank</a> site) I will post/explain the solution for all the lessons I have solved.<br>The main idea will be to understand how to reach the solution rather than the final code itself. This means that when none particular execution order is requested performance won’t be taken into account. I will write this series aiming for new developers.</p><h2 id="Highlights"><a href="#Highlights" class="headerlink" title="Highlights"></a>Highlights</h2><p>Next some point that are worth to mention:   </p><ul><li>All the solutions presented, expect otherwise expressed, will be created by me, so please feel free to add any improvement, new ideas or just your thoughts.</li><li>The solutions presented won’t try to be sorter, fast nor the “best” possible one, just the first idea that came to my mind to solve the problem. This means that you should search for the “best” solution on other sites.</li><li>I do not share their classification on the problems, so my recommendation is to not give it too much attention and just try to learn from the problem.</li><li>Do not follow this series as it was a book, try first to solve the problem on your own and then compare with me and give me your feedback.</li></ul><p>To stop this nonsense of wording let start with the first problem.</p><h1 id="Lesson-01-a-BinaryGap"><a href="#Lesson-01-a-BinaryGap" class="headerlink" title="Lesson 01-a: BinaryGap"></a>Lesson 01-a: BinaryGap</h1><p>Problem URL: <a href="https://codility.com/programmers/task/binary_gap/" target="_blank" rel="noopener">https://codility.com/programmers/task/binary_gap/</a><br>Exercise URL: <a href="https://codility.com/demo/take-sample-test/binary_gap/" target="_blank" rel="noopener">https://codility.com/demo/take-sample-test/binary_gap/</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>There are many ways to solve it, from start counting the 0s and follow a control over the largest sequence to convert the number into another data structure that allows querying some of its properties.<br>In any case, as I see it, you will need to treat the number as a binary one, so it could be a good start to convert the input parameter into binary.</p><p>From the world of possible solutions the first one that came out to my mind was to treat the number as a string where I need to find a particular pattern.<br>In this case I can just split the string on 1s sequences obtaining an array of 0s, and then find the largest one.</p><p>It is easy to realize that are case “edge” cases that you need to control in order to make ir work. First, what happens when the input number is a bunch of 1s?, What happens if the input number has its largest sequence of 0s not ended by a 1 (example <strong>1001000</strong>)?<br>As I couldn’t imagine any other case, I just controlled those by removing the last group of 0s.</p><p>Finally, assuming there are groups of 0s remaining in the array, it would just a matter of finding the largest. Sort by size and pick the first one.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">N</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//Convert to binary</span></span><br><span class="line">  <span class="keyword">var</span> str_bnr = (N &gt;&gt;&gt;<span class="number">0</span>).toString(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">//Split by 1s (or converted into an array of groups of 0s)</span></span><br><span class="line">  <span class="keyword">var</span> raw_zero_parts = str_bnr.split(<span class="regexp">/1+/</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line"><span class="comment">//if the last digit is a 1+</span></span><br><span class="line">(raw_zero_parts.length &amp;&amp; raw_zero_parts[raw_zero_parts.length - <span class="number">1</span>] === <span class="string">''</span>) ||</span><br><span class="line"> <span class="comment">//if the number ends in 0s</span></span><br><span class="line">(raw_zero_parts.length &amp;&amp; <span class="regexp">/0+/</span>.test(raw_zero_parts[raw_zero_parts.length <span class="number">-1</span>]))</span><br><span class="line">  )</span><br><span class="line">  &#123;</span><br><span class="line">    raw_zero_parts.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (raw_zero_parts.length &amp;&amp; raw_zero_parts[<span class="number">0</span>] === <span class="string">''</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    raw_zero_parts.shift();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (raw_zero_parts.length)</span><br><span class="line">  &#123;</span><br><span class="line">    raw_zero_parts = raw_zero_parts.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> b.length - a.length;&#125;);</span><br><span class="line">    <span class="keyword">return</span> raw_zero_parts[<span class="number">0</span>].length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>I received a much better code alternative that I think it is worthly share:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span> (<span class="params">N</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> N.toString(<span class="number">2</span>).split(<span class="string">'1'</span>).slice(<span class="number">0</span>,<span class="number">-1</span>).sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> b.length - a.length&#125;)[<span class="number">0</span>].length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>How to create a simple github blog</title>
      <link href="/2016/02/24/2016-02-24-how-to-create-a-github-blog/"/>
      <url>/2016/02/24/2016-02-24-how-to-create-a-github-blog/</url>
      <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Hi, today I want to tell you how I have created this simple bog. Not because there aren’t good tutorials out there, but just because.<br>Important disclaier, actually I dont know anything about jekyll nor github pages, this post is just my experience creating this blog.</p><h1 id="Prequisites"><a href="#Prequisites" class="headerlink" title="Prequisites"></a>Prequisites</h1><ol><li>I assume that you already know what it is github pages and you already have an account on <a href="www.github.com">GitHub</a>.</li></ol><h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><h2 id="Github-repository"><a href="#Github-repository" class="headerlink" title="Github repository"></a>Github repository</h2><p>Yeap, without losing time let go and choose a theme that you like. The idea is really simple, just select a github respository that you like and fork it.<br>To do this I recommend the following sites:</p><ul><li><a href="http://jekyllthemes.org/" target="_blank" rel="noopener">Jekyll Themes</a></li><li><a href="https://jekyllrb.com/docs/sites/" target="_blank" rel="noopener">Sites using jekyll</a></li></ul><p>where you can chose any of them.<br>I think that is a good idea to look for a theme that provide as many feature as you want, this will save you time.<br>Some of the nice-to-have features can be: Task runner to generate statis assets like CSS and JS if any, use LESS or SASS, provide a Search, contact us, a good help, etc.<br>If you decide to start from scratch, you are reading the wrong tutorial.<br>After fokring the choosen repo please very the following points:</p><ul><li>Remove all generic or personal information depending on where you fork from.</li><li>Verify the branch name (it should be called master for personal sites)</li></ul><h2 id="Test-Locally"><a href="#Test-Locally" class="headerlink" title="Test Locally"></a>Test Locally</h2><p>As a good idea to start validating the posting workflow fetch your repo and make it work locally.</p><ol><li>Install <a href="https://help.github.com/articles/setting-up-your-pages-site-locally-with-jekyll/" target="_blank" rel="noopener">gem deps</a></li><li>Install npm deps (if any)</li><li>Edit _.config.yml file</li><li>Remove (just at this point) if present the CNAME file</li><li>Run it</li></ol><p>To do all this I strongly recommend using <a href="https://c9.io/" target="_blank" rel="noopener">Cloud9 IDE</a>, which by the way is the IDE I am using to write this blog.</p><p>If you use Cloud9 use the following command.</p><pre><code class="shell">jekyll serve --host $IP --port $PORT --drafts</code></pre><p>If you are testing this on you local pc</p><pre><code class="shell">jekyll serve --drafts</code></pre><p>As you can imagine  –drafts also generate post for each file in the _draft folder.<br>Note: if you have updated to Jekyll 3, or just if you are unable to see some of the post/file that you have created, check the date (in the file name) to verify it is not in the future, if it is the case add the parameter: –future</p><p>Finnaly remember to add a License file, first to respect the repo you have forked and secondly to known what is possible to do with the content of your blog.</p><h1 id="Create-a-post"><a href="#Create-a-post" class="headerlink" title="Create a post"></a>Create a post</h1><p>All files in the _posts folder are posts, the only thing you need to follow is the name convention (YYYY-MM-DD)-\&lt;file-name>.md. This is optional for the _draft folder.<br>In the each post follow the header format (front matter), meta-data used for the site generation.</p><p>When you are ready just push your changes to github.</p><h1 id="Extra-features"><a href="#Extra-features" class="headerlink" title="Extra features"></a>Extra features</h1><p>I will update this section as I continue adding new features into this blog.</p><h2 id="Concat-us"><a href="#Concat-us" class="headerlink" title="Concat us"></a>Concat us</h2><p>This simple feature is not trivial in static websites, but as usual there is a solution. In my case I have chose the free solution provided by <a href="http://formspree.io/" target="_blank" rel="noopener">formspree</a>.<br>If you need an example of how to use it just the the HTML of my site.</p><h2 id="Custom-Domain"><a href="#Custom-Domain" class="headerlink" title="Custom Domain"></a>Custom Domain</h2><p>Firstly, buy a domain. <a href="http://www.namecheap.com/" target="_blank" rel="noopener">Namecheap</a> is a very good options, it is not just cheap but also the support is really good. (I dont want to sell it to you, but as far as I could see it was the best).<br>Once you have your domain folow these <a href="https://www.namecheap.com/support/knowledgebase/article.aspx/9645/2208/how-do-i-link-my-domain-to-github-pages" target="_blank" rel="noopener">steps</a>. </p><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><p>In order to add comment in your site you only need an account on <a href="https://disqus.com/home/explore/" target="_blank" rel="noopener">Disqus</a>, I can image that there are tons of different providers for this, I just dont care.<br>I recommend the following posts to accomplish this:</p><ul><li><a href="http://www.perfectlyrandom.org/2014/06/29/adding-disqus-to-your-jekyll-powered-github-pages/" target="_blank" rel="noopener">Perfectly Random</a></li><li><a href="https://help.disqus.com/customer/portal/articles/472138-jekyll-installation-instructions" target="_blank" rel="noopener">Oficial Instruction</a></li></ul><h1 id="Obvious-and-good-resources"><a href="#Obvious-and-good-resources" class="headerlink" title="Obvious and good resources"></a>Obvious and good resources</h1><p>Finally some other links that are good to know if you are interested in createing a blog.</p><p><a href="https://jekyllrb.com/" target="_blank" rel="noopener">https://jekyllrb.com/</a><br><a href="https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/" target="_blank" rel="noopener">https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/</a><br><a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">https://help.github.com/articles/using-a-custom-domain-with-github-pages/</a></p><p>As it obvious, this post is just a brief overview that does not intent to be comprenhensive.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>A Pluginable architecture</title>
      <link href="/2016/02/20/2016-02-20-a-pluginableaarchitecture/"/>
      <url>/2016/02/20/2016-02-20-a-pluginableaarchitecture/</url>
      <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Some days ago a friend of mine asked me to make a plugin architecture proposal for one of his projects, and after some thinking this posts came up.<br>I must clear out that I came from the dark (or at least gray) side… C#, so a plugin architecture was a big thing in that context.<br>Basically you build your app in one way and plugins in another, remember that you app is already compiled.<br>But in JavaScript you don’t have the barrier of compiled coded.  </p><p>Before we continue I must admit that after reading my own <a href="!--￼0--&gt;/2016/01/27/possible-architecture-with-backbone/">architecture proposal</a> I realize that the only think I am doing is “applying” Flux idea to a BackboneJS application. Of course that through my own eyes but at the end the main concept is <em>one single data flow</em>.</p><p>Continuing, in brief my reasoning was, we have an application developed with certain architecture in which each agent present a clear responsibility and interface, so the only thing I need to do is create new pieces of code that interact against the already defined interfaces that our app has.<br>It was after this silly conclusion that I realize the importance of components, why the industry is so interested in them and the importance to develop apps.<br>Again, I came from the dark side, so when I thought about component I use to think about Infragistics, Telerik and so on, compiled .dlls that you include in your app that provides you extra features.<br>Clearly this definition of component is NOT the same used in the web ecosystem. In web apps components (at least how I see it now) are <em>the</em> <strong>unit of composition</strong>.<br>Which mean that your entire app could be a component created by the composition of other components.<br>In other words, component or plugin are two interchangeable words in this posts.<br>There are obvious benefits with this approach, which I will describe bellow.</p><p>The rest of the post describe all the constrains and ideas I think about when my friend ask me to create a pluginable architecture.</p><h1 id="Aim"><a href="#Aim" class="headerlink" title="Aim"></a>Aim</h1><p>Extend our application, not reinvent wheel with a new mechanism for other developers to create plugins.</p><h1 id="Plugins-Goals"><a href="#Plugins-Goals" class="headerlink" title="Plugins Goals"></a>Plugins Goals</h1><p>In one sentence; when an external developer creates a plugin for your app he/she should be able to do it in the same way you creates your app but knowing the problems you have solved are already solved.</p><ul><li><p>Developer Friendly: Any one should be able to create a plugin for your app, the only requirements is having node and a text editor.</p></li><li><p>Standard &amp; Simple: In this case no because the technologies used are known, or the architecture proposed is easy to understand, but because it MUST be the same mechanism that enables the original team to create your app to add new features and extend it.<br>Otherwise the cost of maintenance and develop would be prohibitive.<br>Please notice that this point imply that external developers will run, test, create and deploy code in the exactly same way you do when creating your app.</p></li></ul><h1 id="Stages-Development-process"><a href="#Stages-Development-process" class="headerlink" title="Stages/Development process:"></a>Stages/Development process:</h1><p>In general any external developer should be able to work in the same way you do.</p><h2 id="Creation"><a href="#Creation" class="headerlink" title="Creation"></a>Creation</h2><p>At this points I can see two important points to emphasize;   </p><ol><li><p>External developers should not worry about the problems you have already solved. This means that if your app handle bank accounts, plugins must be able to access an account details without worry internal details on how this information is being requested, with just the account number should be enough. I expect that you were able to spot what are the consequences of this point.</p></li><li><p>When developing your app you must create it taking into account extensibility. Most of the time we develop with the hat of problem solvers or feature implementers, which if perfectly fine, but if you care about extensibility you must consider how your code will be edited by other developers.<br>To accomplish this the following mechanisms are some suggestions;   </p><ul><li><strong>events</strong>, throw events on each significant moment, let say when your user was created, when an address is removed, etc.</li><li><strong>plugin classes</strong>, please don’t hate me on this as I am using the same ‘plugin’ word to describe the general architecture and a concrete class.<br>For all the cases when you will allow external developers to change the default flow of the problems you solve, you should instantiate a plugin class and call it. A plugin class could be something as simple as a list of object with a fn property containing a function that receive a variable amount of parameter and returns something.<br>For instance, if you are about to apply a filter over a list of records it could be a good idea to allow external developer to change the final query, for this you create an instance of the plugin class and call it with the query you have already created and you end it running the one returned by the plugin execution.</li><li><strong>follow good development practices</strong>, yes I will mention this. Follow the patterns the industry have develop years ago!, Single Responsibility, Open to extension and Close to edition, etc etc.<br>In this category I will recommend small methods, document the code but do it for real using a serious tools like jsDoc or something similar, one responsibility per class, object, function or whatever you use. I encourage convention over configuration to make it easy to new developer know how to start but you also should allow change this standard convention with configuration or something else.</li></ul></li></ol><h2 id="Running"><a href="#Running" class="headerlink" title="Running"></a>Running</h2><p>Ok, you have created your piece of code now you want to run it and see how it looks like.<br>This is a particular consideration you do have when creating your original original application, not all your code will reside in the same place. Why? Because it does make sense that an external developer needs your entire application to create a plugin for it.<br>I assume in this point that the developer that wants to create a plugin for your app have access to a running instance of your app, at least one demo/develop instance. Take into account that this is very particular for cases like: Magento, Dynamics CRM, QuickBooks or any other extendable “big” solution.<br>To solve this I propose:   </p><ul><li><em>Have a development index</em>, I mean a html index file that loads all the already deployed code from the demo instance and from localhost all extra code, which will the code developed by the external developers. Of course, this solve the client side of the development, all server-side must be uploaded.</li><li><em>Use an SDK</em>. Let be clear in this point I am just talking about a group of gulp/grunt tasks that handle certain functions, like deploy your code, minify your JS, and so on. These tasks must be developed taking into account extensibility, in the same way your code was, but in this case you must allow generate minified or just concatenated JS files without having all dependencies, I mean the code your developed and the external developer want to extend.<br>This SDK could be really relevant if you think about CSS compilation in the case you use SASS, LESS, or anything similar. It is easy to “compile” javascript with broken dependencies but the same with SASS files that reference global variables that are not present is not so easy.   </li></ul><p>To sum up, the tools and mechanism you use in your every day work must be think not just from a feature creator perspective but also from the extensibility point of view. This will allows you to enlarge your development team in the same time you create a community around your solution.</p><h2 id="Integration"><a href="#Integration" class="headerlink" title="Integration"></a>Integration</h2><p>Finally, when you have developed and tested your plugin you will want to combine it with the rest of the solution. I mean, publish it, deploy it or the words you use to release your plugin.<br>I consider relevant two aspects for this topic:</p><h3 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h3><p>This part is a bit out of topic, but you will need a store, market or just a centralized place to publish your apps and plugins.<br>Again, treat plugins as first class applications so you wont need extra consideration for plugins or extensions. Take for instance apt, the Linux command to install software. By using apt you can install programs, daemons, npm libraries, etc.<br>Perhaps the only thing you will care about is a way to specify that a plugin is an extension of certain app in a given version, you will do this as a way of handling dependencies among application, consideration that any serious store should handle our of the box.</p><h3 id="Assets-Management"><a href="#Assets-Management" class="headerlink" title="Assets Management"></a>Assets Management</h3><p>One aspect that people usually pay to much attention to, is packaging. When I will minify my javascript files? how I will upload them? should I join all my files in a zip?…<br>And the answer for all this very complex: It just does not matter!. Handle it in the same way your original app was created.<br>With that being said I like to remember that concatenation and minification are only needed for HTTP 1.x, so if you upload your assets minified and concatenated you wont be able to take advantage of HTTP 2. Besides, if at the store level you want to apply cross-application modification like inject code to track usage, of provide tools to better debugging of application that have been already released, it could be easy if you have the asserts used to create the application rather than a minified version.<br>Anew, this points are also valid for the original application you have developed and now is being extended, so please just provide one clear way to package the code.</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Once an external developer have published a plugin my expectation is that I can install it by just clicking a button and it just work, and in the same way clicking one button would remove the plugin in a safe way (this means that both operations are clean and revertible).</p><h1 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h1><p>If you read the introduction it is easy to see that the benefits are the same of components in general.<br>But as you can image the previous sentence is bit poor in the context of this article. I can perceive the following points:   </p><ul><li>One consistent way of develop application and plugins, and so combine them to create new ones.</li><li>Code re-usage.</li><li>Easy debugging, each error is located only in one component or another.</li><li>If you can develop one app you can develop any part of the system,</li></ul><h1 id="Final-notes"><a href="#Final-notes" class="headerlink" title="Final notes"></a>Final notes</h1><p>All your code must be done with the extensibility hat if you want allow plugins.<br>The general goal is unification and standardization, this is the driving reason why we end with terms LIKE “apps” for applications, plugins, add-ons, components, extensions and so on.<br>I did not mention any web technology in particular to develop plugings as that election is up to you.<br>My only concrete elections are based on the architecture proposed in this <a href="!--￼1--&gt;/2016/01/27/possible-architecture-with-backbone/">article</a><br>I neither talk about server side nor client side as I don’t care about those implementation details, those are aspect that concern the creation of any application not particularities of plugins. </p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Why you should not use Backbone JS</title>
      <link href="/2016/02/02/2016-02-02-why-i-hate-backbone/"/>
      <url>/2016/02/02/2016-02-02-why-i-hate-backbone/</url>
      <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>I know, if you have read my previous posts you may think that this title does not make any sense .<br>But let me explain myself.</p><p>First of all, I am not in favor of any framework in particular but rather in all in general.<br>On the other hand I think you can do excellent software using Backbone, if and only if you have the right tooling around and you have a very advocate and aligned engineering team.<br>The relation/tension between how much freedom do you have versus the simplicity of use, is a key point when choosing a framework.</p><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><p>Let see some Backbone problems that can guide us to understand what points need of our attention when choosing a framework:  </p><ul><li><strong>Data vs logic</strong>: In the same way everybody accepts and enforce a separation between UI and logic, data vs logic must also be separated.</li><li><strong>Testability</strong>: NO! By no mean test Backbone code is easy. If you cannot test your code you will learn how to refactored and do it over and over again.</li><li><strong>jQuery and dependencies</strong>: Nowadays when even M$ have open sourced they browser (or almost) does make sense use jQuery? </li><li><strong>Tracebility</strong>: It seems that this concept wasn’t created when Backbone was invented.</li></ul><h2 id="Data-vs-Logic"><a href="#Data-vs-Logic" class="headerlink" title="Data vs Logic"></a>Data vs Logic</h2><p>Perhaps the core and fundamental reason why I dislike soo much Backbone Models is the same reason why I am not convinced about <em>classes</em>.<br>Must the logic that handle a certain data be coupled with that data?<br>Is there any puristic and technical-only reason that justify having in a Model the data and the methods that alter it?<br>How much reusable is a method that works in the context of the state of a Model?</p><h2 id="Testability"><a href="#Testability" class="headerlink" title="Testability"></a>Testability</h2><p>Assume that you have done an excellent job on disaggregating the naturally mixed HTML and Backbone.Views, how easy is to test a Backbone component?<br>Have you ever try to unit test a Router? What about a Router of any other framework?<br>If we continue analyzing the case of Models it is easy to see how you will be forced to emulate the entire state of a Model to properly test it. And by emulating the entire state I mean call all the required methods and set all the require properties in order to you to be able to make your unit test.</p><h2 id="jQuery-amp-Dependencies"><a href="#jQuery-amp-Dependencies" class="headerlink" title="jQuery &amp; Dependencies"></a>jQuery &amp; Dependencies</h2><p>The fact that a library depends on many others makes it more fragile, like it or not.<br>We all know that semver is the right way to version npm modules. But, the facts shows that people is applying semver in the correct way?<br>Talking about jQuery in particular I must admin that I dont see the point of it. Leaving aside some edge cases and the fact that it is “easier” to call <em>attr</em> rather than <em>setAttribute</em> there is not need of it. Beside, it promote hard-coupled code with HTML. Using jQuery no one would ever create something like React Native (try to thing why Facebook could do it and how hard it could be using jQuery).  </p><h2 id="Tracebility"><a href="#Tracebility" class="headerlink" title="Tracebility"></a>Tracebility</h2><p>Nowadays this concept is gaining some attraction thanks to the creation of new tools like the <a href="https://www.youtube.com/watch?v=xsSnOQynTHs" target="_blank" rel="noopener">Redux Time Travel debugger</a>, but regardless of the tooling you use this concept must be taked into account at an architecture and design level.<br>You will have bugs, for sure. I don’t know how many or how bad they will be, but you will have them. The easy it is to detected them and solve it, the happy your customer will be.<br>Backbone provide just a few features which tend to be rather cool. However extend them or attach any kind of plugin that alter the default behavior was never a use for them. So, how can I modify the default flow of a Backbone.Router? Perhaps I am interested in producing tracing information on each navigation, perhaps I want to edit all my routes by adding a prefix…</p><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><p>To be honest I don’t have “Solutions”, just my perspective on how this points can be mitigated.<br>Please consider that Backbone is just an excuse the discuss about design aspects.</p><h2 id="Testability-1"><a href="#Testability-1" class="headerlink" title="Testability"></a>Testability</h2><p>One decisition that I really encourage you to do is using Virtual DOM. It does not matter what framework you choose as long as you were forced to not manipulate the DOM directly. (Here is where you start seeing why I “hate” jQuery)<br>By not accessing the DOM directly you wont depend on it to make your accerts, this means fast and easy unit tests.<br>Regarding Models I will have to disagree with Backbone authors, putting all your business logic in the same place where your data reside, feels to me like create an entire business app by just using glory old storage procedures.</p><h2 id="jQuery-amp-Dependencies-1"><a href="#jQuery-amp-Dependencies-1" class="headerlink" title="jQuery &amp; Dependencies"></a>jQuery &amp; Dependencies</h2><p>Very simple solution, don’t use jQuery, or if you do make sure that you can easily make unit tests, you are not coupling you business data with a particular UI HTML representation. Try to avoid plugins, etc. </p><h2 id="Traceability"><a href="#Traceability" class="headerlink" title="Traceability"></a>Traceability</h2><p>To be honest there is not reason why this must be a concern of the framework. If you are using React/Redux great, but if not you must take care of the traceability.<br>I mention this just to bring one of many points that you need to evaluate when choosing a framework or designing your app. But any other cross feature concern must be addresses too. </p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In a few words, there is not silver bullet, you need to evaluate each aspect you care about each time you choose a framework or you architect your next app.<br>When you develop software I hope you do it with the idea that it last and were used. And as you don’t know what will change in the next second, just try to make that each component does only sinlge think and does it right. (Any similarity to the Unix philosophy is pure coincidence)<br>Backbone is an awesome framework, however I think it can be improved.   </p><p>BTW: I’m tired of using Backbone as the guide of all my ideas so I wont mention it again at least not for some posts.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>A possible architecture with Backbone</title>
      <link href="/2016/01/27/2016-01-27-possible-architecture-with-backbone/"/>
      <url>/2016/01/27/2016-01-27-possible-architecture-with-backbone/</url>
      <content type="html"><![CDATA[<h1 id="section"></h1><h1 id="introduction"><span id="anchor"></span>Introduction</h1><p>This document try to present a solution, as generic as possible, to handle the complexity of doing Web Business Applications.</p><p>As you will realize I have took lof of ideas from Marionette JS, Odata and Backbone itself. Please read about them if you feel you are missing something.</p><p>In this document I try to apply the Backbone guidelines and the continuous enforcement of almost one single development principle: <strong>SOLID<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></strong>. </p><p>By not mean I have all the answers, nor this proposal is perfect or I am trying to blame others. By the contrary, this is just my two cents on the construction of business apps.</p><p>So please read this post not as brand new idea, but as the result of my experience working on eCommerce apps and a compendium of best practices.</p><p></p><h1 id="vision-aim"><span id="anchor-1"></span>Vision, Aim</h1><p>As I express in the introduction my aim is define a technical overview for business apps. Define a code structure that is flexible enough for the current state of the market, where every single line of code written adds value, where the amount of refactor (a huge problem is in big companies) is minimum.</p><p>I see a code base where A/B testing is something easy and natural, where code can be added and removed by safely editing a package.json file, where new teams can be created and use the code without any worries at all.</p><p>My vision is a code that evolves, where the complexity is per module and related with business aspect exclusively.</p><p></p><h1 id="content"><span id="anchor-2"></span>Content</h1><p>I think that the root of the complexity is in the interaction among agent and the understanding of each of them inside an application. For this reason the current document is organized around each agent in our code base, putting the focus on the client side.<br>Besides, for each of them a definition and a list of contracts is provided.<br>Any interaction outside the ones defined here will be prohibited.</p><p>Note: I assume the existence of an underlying framework that provide basic functionality on top of backbone. But don’t worry, it will only provide generic features and those will be described in this document.</p><h2 id="contracts"><span id="anchor-4"></span>Contracts</h2><p>As one of the most important points to model complexity is a clear definition of the valid interaction, each of them will be defined through a concise template.</p><h3 id="what-they-are"><span id="anchor-5"></span>What they are?</h3><p>Each contract define the valid interface in which each component/agent can be used.</p><h3 id="why"><span id="anchor-6"></span>Why?</h3><p>As business application tend to be big code bases with lot of developers, when the clear the aim of each agent the easier it will be to add new feature to the code.</p><h3 id="template"><span id="anchor-7"></span>Template</h3><h4 id="overview"><span id="anchor-8"></span>Overview</h4><p>This section provides a brief idea of that the contract is about.</p><h4 id="purpose"><span id="anchor-9"></span>Purpose</h4><p>A list of the aims pursued by the contract.</p><h4 id="content-1"><span id="anchor-10"></span>Content</h4><p>This is the main section of the contract where the interaction is described.</p><h4 id="benefits"><span id="anchor-11"></span>Benefits</h4><p>List of the benefits gained after applying the proposed rule. This allow to have a better judgment of the value of the contract.</p><h4 id="extensibility"><span id="anchor-12"></span>Extensibility</h4><p>Independently what kind of application we are building we need to plan for the unknown, for the evolution of our code.</p><h4 id="examples"><span id="anchor-13"></span>Examples</h4><p>In order to evacuate any possible doubt all contract provide an example of applicability.</p><p></p><h1 id="application-definition"><span id="anchor-14"></span>Application Definition</h1><h2 id="definition"><span id="anchor-15"></span>Definition</h2><p>This is the only none-technical contract in the entire post. Nevertheless it is not less important, as it set the mind set that all developer must have when facing a new feature.</p><p>Through the pass of the time the conception of business apps have changed, from simple applications that fulfill small requirements to complex frameworks.</p><p>Part of the reason why business apps are so complex is because market is complex, and the need to improve ROI is constant. Having defined what all stakeholder expect from the app is really important. Should we develop the as if it will be used by other teams? Are there Manager interested in creating a framework from this project? How much the team involved is expected to grow?</p><p>As a developer you must think that the code you are producing will always be extended and used by someone else to create something that you have not idea.</p><h2 id="components"><span id="anchor-16"></span>Components</h2><p>Any big application posses lot of component, but for the sake of simplicity let mention the following:</p><ul><li><strong>Code base</strong>: All your code.</li><li><strong>Developers</strong>: We as authors and customizers of this code bases are part of it, and assuming it will give us the needed vision to work.</li></ul><p></p><h2 id="contracts-1"><span id="anchor-17"></span>Contracts</h2><h3 id="team-application-definition-contract"><span id="anchor-18"></span>Team-Application Definition Contract</h3><h4 id="overview-1"><span id="anchor-19"></span>Overview</h4><p>This contract formalize and synthesize the responsibilities and the goal every developer must understand in order to develop in the app.</p><h4 id="purpose-1"><span id="anchor-20"></span>Purpose</h4><ul><li>Define the mind set every person that edit the code needs to have.</li></ul><h4 id="content-2"><span id="anchor-21"></span>Content</h4><p>Believe it or not your code is many things, from a future framework to a customer facing application.</p><p>This translate to the fact that every class you made will be for sure ran under unplanned context. From different browsers to different aim and usages. Lot of our code base is reused by other teams, from in-company to third parties and who knows what more.</p><p>On the other hand, the final reason why you are developing is to delivery a functional application that provide value/features for final customers.</p><p>All these conditions makes from any business app a complex scenario hard to model. There is no golden guide to rule them all, so at the end of the day will be the developer who decide which is the best way to create something.</p><p>My humble help is this, we need to think of our work as the fulfillment of a contract with the rest of the consumer of our code.</p><h4 id="benefits-1"><span id="anchor-22"></span>Benefits</h4><ol style="list-style-type: decimal"><li>More aspect will start to be configurable.</li><li>Communication will be easy as all the team will be in the same page.</li><li>People will regularly start to be more careful about code editions.</li></ol><h4 id="extensibility-1"><span id="anchor-23"></span>Extensibility</h4><p>When the expected result is clear new teams can be created easily than when the only aim is create new features.</p><h4 id="examples-1"><span id="anchor-24"></span>Examples</h4><p>N/A.</p><p></p><h1 id="modules"><span id="anchor-25"></span>Modules</h1><h2 id="definition-1"><span id="anchor-26"></span>Definition</h2><p>Having an excellent understand of what a module is, is more than essential, as they are our main unit of work. (At least in this post). In other word, is the definition itself what ends up being the contract to interact with modules.</p><p></p><p><em>RAE</em>: “<em>Piece or unitary group of pieces that are used repetitively to build a thing</em>”</p><p><em>Wikipedia</em>: “<em>Modular programming is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality</em>”</p><p></p><p>From my personal perspective, a module defines as a group of asset that work together to achieve <strong>one</strong> single requirement. They represent our unit of “work”, encapsulating and abstracting away all its internal implementation details.<br>When defining what a module does you must be able to do this without using any linkers at all.</p><p></p><h2 id="components-1"><span id="anchor-27"></span>Components</h2><p>Based on our previous definition, every component needed to fulfill the module's aim, apart from the framework, is part of the module. Some examples can be:</p><ul><li>Configuration</li><li>JavaScript: Views, Routers, Module, Stores, Utilities classes, Services &amp; Backend Models</li><li>Assets: Images, Fonts, translations, etc</li></ul><p></p><p>Although this definition is correct, it is incomplete. In the same way certain files depend on other files inside a module, some modules depend on other modules.</p><p>Another point to consider is the relation between a module and the framework. Even that we are the creators of our app this relation and dependency must be clearly defined and used. Independently of what dependency manager do you use, AMD, CommonJS or whatever.</p><p></p><h2 id="contracts-2"><span id="anchor-28"></span>Contracts</h2><p>The following list is mainly advocated to formalize what a module is. For this reason there are extremely related to each other. They could even be one single contract but to be more understandable they are divided into 3 related aspects.</p><p>Before analyzing these contracts, we should see how the industry is handling this issue. One excellent example that solve almost all the problems we are facing is npm, so I base many ideas expressed here on this project.</p><p></p><h3 id="module-definition-unit-contract"><span id="anchor-29"></span>Module-Definition-Unit Contract</h3><h4 id="overview-2"><span id="anchor-30"></span>Overview</h4><p>If you agree that you will divide all your app into modules, there can not exist anything else than modules. No special modules that are actually mini-apps nor anything like that.</p><h4 id="purpose-2"><span id="anchor-31"></span>Purpose</h4><ul><li>Respect and honor the definition of module.</li><li>Reduce the needs to apply cross-modules hacks.</li></ul><h4 id="content-3"><span id="anchor-32"></span>Content</h4><p>In one single sentence: </p><p>Everything that belong to a module must be inside that module &amp; everything is a module.</p><p>Deducing from the module definition all assets that directly helps the module to fulfill the it's aim, must be part of the module.<br>Give a definition to know if certain assets <em>directly</em> help a module or not, that works in all cases, is extremely hard and in practically unnecessary.</p><p>In other words, I consider each module as a require code to implement one feature, considering backend and frontend assets.</p><p>In order to have a good understanding in this area next I will analyzing some of the most important assets.</p><p><strong>Module's configuration</strong> must be located inside the each module. If there are components that are located outside a module, it is totally impossible to use such module in any other context without replicate its configuration. (Believe me, all big companies fails on this)</p><p>In the majority of the cases modules should only access its own configuration. It does not have too much sense that a module need read/write the configuration of other module. Although there are exceptions like cross-module configurations that can be helpful to reduce duplicate code, even in this case this configuration must be in one single place, in the application configuration.</p><p>There are scenarios that can seem confusing at fist, for instance those modules that handle the user preferences. This one seems to be an exception of the previous statement. But in fact, modules likes this are just like any other module, it brings information from back-end and expose it in the client side. So if a module need to access this information you have to declare a dependency from one module to another (please see next contract for a reference on inter-modules dependency management).</p><p>In this section we didn’t define what a <em>configuration</em> is, anyway for the sake of simplicity I consider ONLY JSON<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> data to be valid configuration.</p><p>Bootstrapping information is a common task to retrieve information and configuration from the back-end at the load time. Again <em>what</em> and <em>how</em> is exposed are decisions that must be taken by the module and be specified inside the module boundaries. Of course, supported by a generic functionality provided by the underlying framework (in this case I am of your code, not Backbone not anything else).</p><p>Do not use global variableslike <em>MyCompany.ENVIRONMENT </em>inside modules.<br>In some scenarios you can use them to load multiples back-end configs, but in any case remember that this is a task performed by the underlying framework to optimize load time..</p><p>Based on the previous aspect each module will be able to specify a front-end and back-end configuration, and now, with this points, a way to bootstrap back-end information.<br>Notice the different between configuration and information, with the latter, information, we can be retrieve the result of any computation in the back-end.s</p><p><strong>Module's composition files and the units of composition to create. </strong>We claim that our application is composed by using multiples modules together.<br>In other words, exclusively only when you are working inside a module or adding a new feature, you can refer to files inside a module.</p><p>Consequences of this are simple, we continue needing to concatenate front-end and back-end files, so instead of grabbing files inside modules, we should ask each module what assets need to be concatenated in the back-end and in the front-end.</p><p>If we see npm, each node package specify <em>main </em>property that points to the file that represent the entry point of the module.</p><p>In our case we will need to specify: </p><ol style="list-style-type: lower-alpha"><li><strong>Front-end entry point: </strong>As specified by npm with a main entry is an excellent idea.<br>Besides we will require that from that file all its internal dependencies can be computed so we can generate the tree of files that will take part of the front-end code.<br></li><li><strong>Back-end entry point:</strong> Currently this is not in part of npm, so I propose again making this convention explicit by defining a <em>backEndMain</em> property in the package.json file of the module.<br></li><li><strong>Front-end configuration: </strong>This is again a new concept. A file which only has JSON data that is being pointed by the property <em>configuration</em> of the package.json file.<br>The underlying framework will be responsible for loading this file and send it to the module through a module API (more of this on the next contract).<br></li><li><strong>Back-end configuration:</strong> This is the counterpart of the previous point.<br></li><li><strong>Back-end bootstrapping information</strong>. Although this is something you will want to handle carefully as it affect directly your loading time, is an API you will need to have explicitly. Again, another package.json property, in this case called <em>backEndBoostrapModel</em>, which will point to a back-end file with one single method, <em>loadData, </em>that will be executed to bootstrap the require information.</li></ol><h4 id="benefits-2"><span id="anchor-33"></span>Benefits</h4><ol style="list-style-type: decimal"><li>Real modularity in our code base.</li><li>The mechanism to add or remove what data is boostrapper will be module-agnostic.</li><li>The use of the global variable must be occasional and well justified.</li><li>There wont exist computation (functions) on the configuration.</li><li>Allows life cycles per module and not force an entire release of all your application.</li><li>Configuration will be safe to edit.</li><li>Configuration will be serialized safety and thanks to this new visual editor can be created on top of this.</li><li>Creators/Customizers of modules wont be require to know how the framework work in order to bootstrap information or edit the configuration of a module.</li><li>Any file inside a module can be edited without affecting others.</li></ol><h4 id="extensibility-2"><span id="anchor-34"></span>Extensibility</h4><p>As module's assets are simple files, extend a module is just a matter of adding a new file to it.</p><h4 id="examples-2"><span id="anchor-35"></span>Examples</h4><p>Modules as unit of composition can be seen more clearly when we contrast them with files as unit of composition. If we use files, it does not make any sense to have them grouped in folder, by just prefixed them with the functionality they are related would be enough. In this case our code base would be a big list of files where some of them start it name, let say, “Address” other with “CreditCard”, and we can after the functionality add another prefix to indicate if it is front or back-end logic, so a sample file could be: Address.Front.Details.View.js.</p><p></p><h3 id="module-definition-dependencies-contract"><span id="anchor-36"></span>Module-Definition-Dependencies Contract</h3><h4 id="overview-3"><span id="anchor-37"></span>Overview</h4><p>This contract try to formalize what are the parts of a module and what is needed for a module to fulfill its purpose. All the points treated in this contract are direct consequence of the module definition.</p><h4 id="purpose-3"><span id="anchor-38"></span>Purpose</h4><ul><li>Enforce our Module's definition.</li><li>Allow real modularity in our code.</li><li>Reduce unexpected side effect when editing a module.</li><li>Release developers from the requirement of knowing how the entire application works in order to understand a single piece of the code.</li><li>Permit adding and removing modules, for instance to make A/B Testing, in an extremely simple way.</li></ul><h4 id="content-4"><span id="anchor-39"></span>Content</h4><p>This section model how modules handle to express dependencies. There are two main points regarding dependencies that we need to define; Given a module WHAT are its dependencies, and given a module HOW to know what exports.</p><p><strong>What </strong>are the dependencies of a module should be defined in the <strong>package.json</strong> file.</p><p>It is of <strong>paramount importance to notice the different kind of dependencies modules can have</strong>:</p><ul><li><em>Mandatory Dependencies</em>: When a module, in order to achieve its aim, needs from another module, a mandatory dependency is created.<br>For example: the module Checkout.Shipping.Address has a mandatory dependency with the module Address, because if the latter is not present the former by no means will be able to accomplish anything.<br><strong>As it is predicable, this kind of dependencies are the less common</strong> in the context of <em>feature modules.</em> This is a consequence of our initial definition of a module. One module must provide only one functionality.<br><br><em>Notes</em>: All feature used from the underlying framework must be treated as ordinary modules regarding to dependency management. Having global will significantly increase the coupling of the final application. Besides this would mean that there are more than one way to handle dependencies, which is the aim at all. (so no global $ nor jQuery)<br></li><li><em>Optional Dependencies</em>: Almost all of dependencies that a module has falls in this section. I recommend this so when a module is not present you application will continue working.<br>For example: The main PDP View must optionally depends on the Cart Model. If it is present in the application the 'Add to Cart' button will be visible in the view, but if not (perhaps the current application is only a read-only catalog) the PDP must continue working.</li></ul><p>As we base or modules on npm we should us the property <em>dependencies </em>for mandatory dependencies and <em>optionalDependencies</em> for optional dependencies.</p><h4 id="side-effects"><span id="anchor-40"></span>Side Effects</h4><ul><li>One peculiar side effect is at a View level, composite Views will start supporting null as a child view, as there could be the cases where an optional dependency is not meet.</li></ul><h4 id="benefits-3"><span id="anchor-41"></span>Benefits</h4><ol style="list-style-type: decimal"><li>It wont be allowed to require other files outside the module.</li><li>As backbone already provide mechanism to access current view, there wont we any reason to require jQuery. So no module will use jQuery by itself at all.</li><li>Allows life cycles per module and not force an entire release of all the application.</li><li>Based on npm with a touch of “Universal” JS.</li></ol><h4 id="extensibility-3"><span id="anchor-42"></span>Extensibility</h4><p>As we have defined all the dependencies on properties of the package.json file by just editing this file we will be adding or removing any dependency.</p><h4 id="examples-3"><span id="anchor-43"></span>Examples</h4><p>An imaginary module 'Transaction Searcher' module will depend optionally on Deposit Application, Credit Memo and Payment, as these module can or cannot be present in the current application and this does not means that the Transaction Searcher is not able to accomplish its aim.</p><h3 id="section-1"></h3><h3 id="module-application-interaction-contract"><span id="anchor-44"></span>Module-Application-Interaction Contract</h3><h4 id="overview-4"><span id="anchor-45"></span>Overview</h4><p>This contract defines how to access other modules information and how the interaction between a module and the application must be.</p><p>This can be seen just as a study case where I apply the Dependency Injection pattern in the context of a business apps.</p><h4 id="purpose-4"><span id="anchor-46"></span>Purpose</h4><ul><li>Allow modules to interact with each other.</li><li>Allow composition on module's functionality.</li><li>Allow modules to access Application services.</li><li>Allow module to exports functionality in a context agnostic way.</li></ul><h4 id="content-5"><span id="anchor-47"></span>Content</h4><p>It is useless to define all the dependencies and components a module has if there is not way to access them.</p><p>If our composition unit is the module it has not sense to require individual files, we must interact with a module. In other words, every module must publicly expose the API to interact with it.</p><p>I can see two aspect in this contract.</p><p><strong>Exporting or exposing internal module components and information</strong>. Fortunately we can use the mechanism that npm provides. The only consideration, in case of using module.export, will be using Browserify or any other transpiler to run your code on the browser.<br>Anyway, you will need a mechanism to communicate modules with the application. We will define a mounting process, in which modules are called to be mounted into the current application. An initialization process but at the module level. We will implements this by calling a pre-defined function (lets call it <em>startUp) </em>in the backend and frontend file entry point. Which means that some information is passed from the application to the module and some information is retrieved from the module.</p><p>It will be responsibility of the module to return an object (the facade of the module) that allows interact with it. This object, the module's API, must be totally documented.<br>The tradeoff in this case will be not expose internal implementation details, but offer a rich interface to interact with the module.</p><p><strong>Access dependencies information</strong>. When the <em>startUp</em> function is called two parameters must be passed, the application instance and an object with the dependencies specified in the package.json. It will be the responsibility of the module's entry point to preserve this object so inner components of the module will access them too.<br>This second object will have a property for each module's dependencies, where the name of these properties will be the same as the name of the requested module.</p><p>I know this may seems unnatural, why not just requiring the dependencies as in any npm module? To allow extension point during this process, allow setting default values when a module is not present, etc. Believe me, in the context of big business app you never know what will be the next feature.</p><p>This information accessed wont be more than the exported interface/API of each of the require modules.</p><p>In the case of optional dependencies, if they are meet, they will be accessible as any other dependency (property of the second parameter object), if it's not, the property with the module name must be set to false making explicit that the module was requested but the dependency was not meet.</p><p>All the previous has as a consequence that all inter-module communication will be done through decouple mediums.</p><p>When module to module communication is require, for example to indicate that an address has been created, an event through the Module's API can be thrown.</p><p>Note: As event can become unmanageable I recommend name-spaced all of them in the following way:</p><p>moduleName:entity:action</p><p>An example could be: <em>address:addressCollection:add </em>to indicate that at item was added into the address collection of the address module.<br>Finally I would recommend RxJS to handle events, but we will leave for another post.</p><h4 id="benefits-4"><span id="anchor-48"></span>Benefits</h4><ol style="list-style-type: decimal"><li>Easily mocking entire modules.</li><li>The edition on one module not affect other modules.</li><li>Applying an entire refactor of a module, while it preserve the module's API, wont have any particular risk at all.</li><li>Stability and QA coverage could be really measured per module.</li></ol><h4 id="extensibility-4"><span id="anchor-49"></span>Extensibility</h4><p>By just passing more values in the <em>startUp</em> entry point function we can extend this interface.</p><h4 id="examples-4"><span id="anchor-50"></span>Examples</h4><p>This allows us to define log entry for each module that is requested but not present. Or add logging information of the inter-module communication.</p><p></p><h1 id="views"><span id="anchor-51"></span>Views</h1><h2 id="definition-2"><span id="anchor-52"></span>Definition</h2><p>Views represents the piece of code where almost all of the interaction logic is located. So model them, understand them and interact with them correctly means we are handling correctly a big portion of our application computation.<br>Let see some definitions of Views:</p><p><em>Backbone</em>: “<em>Backbone views are almost more convention than they are code — they don't determine anything about your HTML or CSS for you, and can be used with any JavaScript templating library. The general idea is to organize your interface into logical views, backed by models, each of which can be updated independently when the model changes, without having to redraw the page. Instead of digging into a JSON object, looking up an element in the DOM, and updating the HTML by hand, you can bind your view's render function to the model's “change&quot; event — and now everywhere that model data is displayed in the UI, it is always immediately up to date</em>.”</p><p>Personally I would define a view as the piece of code in charge of handling the interaction between the a user interface<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> (generally representing user requests and the output given the user, the DOM, a console or whatever) and a store<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> (state container) through the invocation of methods and listening to events in the latter.<br>If you agree with this definition probably the name Controller rather than View is more appropriate. Particularly if we see other framework that apply the MVC pattern.</p><p></p><h2 id="components-2"><span id="anchor-53"></span>Components</h2><p>From the above definition we can observe that a View only knows about a generic user interface and a state container – Store from now on. </p><ul><li>The generic user interface in our Views is represented by a <strong>Template</strong>. Functions that takes a context object (state) and returns a representation of it.<br>Templates are part of views, every view has a default template and in the majority of cases is the view that define what template it use. This not always is the case neither a rule, but is the way I recommend using views and templates.<br></li><li>It turns out that there are lot of cases where this simplistic interpretation of the reality is not enough to implement all business requirements without code repetition. For this reason is that views need be composed with child-views (e.x Marionette.js composite view)<br>In this case Views only know about those child views that helps the principal View's purpose. Treating them in a very generic way. Please refer to the View-Child-Views Contract for more information<strong>.</strong><br></li><li>The <strong>Store </strong>is injected to view (Dependency Injection pattern must be used in this case). This is so because the view must directly interact with store, and in order to avoid coupling the code, this interaction must be done through the store interface.</li></ul><p></p><h2 id="contracts-3"><span id="anchor-54"></span>Contracts</h2><p>I consider the following list of contracts extremely important. Please read them all in a consciously way.</p><h3 id="view-template-contract"><span id="anchor-55"></span>View-Template Contract</h3><h4 id="overview-5"><span id="anchor-56"></span>Overview</h4><p>This contract formalize the most important interaction you can find inside any module, the relation among Views, Templates and Stores. How and what data is shown into the user interface for the final data consumer.</p><h4 id="purpose-5"><span id="anchor-57"></span>Purpose</h4><ul><li>Leave totally clear how developer must handle the View-Template interaction.</li><li>Define the information flow to write into the user interface.</li><li>Define the information flow to read from the user interface.</li><li>Draw the basic structure of a generic Views.</li></ul><h4 id="content-6"><span id="anchor-58"></span>Content</h4><p>Previous definition of Views focus on what Views are, but not explicit mention on how this interactions are done. For this we will say that a View determines WHAT content is shown and the Template determines WHERE and HOW it is shown.<br>In this case <em>what</em>, for example, can be what properties of the current user are shown, <em>where </em>indicate in what location it must be presented and <em>how </em>refers to the style applied to it.</p><p><strong>This means that for each responsibility there is only one agent in charge of it</strong>.</p><p>As in this contract we have two components interacting, two aspect can be model.</p><p>First, the flow of data from the view to a user consumable representation.</p><p>For a view to show/return data must call one single method that its only responsibility is generate an output that describe the View's Store through the help of the View's Template. Just for simplicity lets call this method <em>render. </em>The returned data represent the current state of the Store (not the View's as the View do not have state).<br>Commonly we use an HTML string to represent this output (obtained from a template), but this MUST be totally irrelevant form the View's perspective as it wont interact with it directly. It could even be an object, a call to an external service or anything else. It will be the underlying framework that in a unified way will handle this.<br>On the other hand, from this string other intermediate representations can be generated to update/interact with the final user abstraction – DOM in generally. But again, it wont be the View which will know about any existence of the DOM, as by definition the View only knows about a Store and a Template function, nothing else.</p><p>In order to avoid errors and unnecessary complexity this flow should be as simple as possible (taking into account that it will be done repetitively along the application, and because it has performance implications). This flow can be represented in the following way:</p><p>user interface representation = render(view.getStore(), view.template)</p><p>Direct consequences of the previous statements combines sith the View's aim can generate the following pseudo rules that can help us to classify the scope of each component:</p><ul><li>A View is “correctly” developed if the <em>render</em> method is automatically called each time the Store change. Making almost unnecessary to think about this flow.</li><li>The context in which this process take place is totally unknown for the View.</li></ul><p>Please notice that I have avoided the mention of particular representations, like jQuery, on purpose. jQuery is just one of many DOM abstractions.</p><p>The described interaction denote that the Store is one single unit with the single responsibility of representing certain state. Inside this state I consider EVERY aspect the Template use as an input, if an accordion is expanded or collapsed is part of the Store, the name of the current user shown is part of the store, if there is an error message to show is a property of the Store, and so on. For this single purpose a simple JSON object would be sufficient. But for the sake of simplicity and for detection of changes in the Store I recommend a more elaborated object that could trigger events and track property changes.</p><p>While this is correct and architecturally pure, we need to consider the kind of information we want to show. It is simple to realize that it is not the same an address street that the state of a collapsible accordion. For this reason I propose the use of a new Store object containing all the state previously expressed and in which one particular property will be the current View's Model. This give us a granular level of control over the View's State:</p><ul><li><em>General Store properties</em>: Here all properties that does not have a back-end counterpart will be stored.<br>This enable the handling of the default user interface state of any View in a generic way. For example if we want that all accordions appears collapsed based on some application-wide condition it will be just a matter of changing the Store factory.<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a></li><li><em>Store's Model</em>: This is the property we are now using in Views thanks to Backbone guidelines. Now formalized to only represented back-end information. </li></ul><p>Notice that this is just a mechanism that pursuit a way of grouping all the state related with a View. Nothing else than my vision on this particular point.<br>Whereas this state is represented in one single object, the particular representation can vary.</p><p>Please refer to the View-Store Contract for detailed information on that interaction.</p><p>To pass this information from the view to the template I would recommend an explicit function in each View, that can be called getUserInterfaceState,<em> </em>which generate the JSON object that represent the state if the view. Please try to compute only once the result of this method, even better return the entire store or a projection of it.<br>This last observation not just enforce our View definition in which it must be stateless but also make extremely easy to track the View's state.</p><p>It is important to note that, as each aspect has one single agent that manage it, transfer the Store from the View to the render process will be done by one single responsible. In this case the already mentioned <em>getUserInterfaceState</em> method.</p><p>In this direction of the flow, from the View to the user interface, we have delineated what parts take part of it, what are the responsibilities of each of them and some points showing a possible implementation, but denoting what trigger this process is still missing.<br>In one sentence:</p><p>The user interface must be updated each time the backing Store change.</p><p>There is only one case when the View cares about this changes, and it is when it reads input from its user interface. Case in which is the view itself that will apply changes over the Store.</p><p>The second aspect we can describe is reading the inputs from the template output. Lets start by pointing that the way in which these requests<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a> are received should be independent of the user representation choose by the underlying framework.<br>Ideally we should be able to represent all request information in a way totally agnostic from the source of the input, as the only concern of the View is to update a Store. Update that will be done accordingly to the request <em>intention</em>, without knowing about the input <em>source </em>or <em>type</em>.</p><p>Unfortunately, as we currently use Backbone Views, this information came in the form of jQuery event objects<a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>, which are too coupled with the DOM and to jQuery itself.</p><p>My intention with this mention to Backbone is not criticize it, but understand what is the cost of using it, what drawbacks it has and clearly visualize what could be a better alternative in the context of this contract.<br>Any refactor on this point involves extending or modify the default Backbone code, which could be beneficial from a testability perspective, but out of the scope of this proposal.</p><p>Assuming we use jQuery events, we will have certain group of View methods in charge of handling requests from the user interface, let call them handler methods. These handlers has as mandatory first obligation; extract all needed information from the passed in event, making sure in this way that the effect of jQuery dies as soon as possible, only being visible in the first lines of these methods.<br>Even for this cases, Views must not access jQuery directly, only through the View's property $, and only to extract the request properties needed to understand the intention of it.</p><p>After this first step is done, handlers will call inner View methods to apply any needed transformation on the recollected input and finally update the Store. In other words, Views only handle the interaction between a user interface and a Store.</p><p>It is not a mistake missing to mention neither Templates nor the render flow. Because the process to update the user representation will be triggered when the Store change, without considering who change it. Because of this, the definition (or binding) of “<em>when the X property of the Store change make a render</em>” must be located in one single place/method in the View. I would say in a method called <em>bindEventsOn</em>, executed in the initialization process or when the state of the View is totally formed.<br>Take in mind that one of the goals of this method is allow the developer to be able to forget to call the <em>render </em>method.</p><p>It is hard to define what are the responsibilities of these handlers in a deterministic and concrete way. So let simply agree on the following heuristic:</p><p>View handler methods are simple input transformers where its only knowledge is the existence of an input request and an output modification on a Store object.</p><p>Consider reading View-Store Contract for more clarification if needed.</p><p>Inside this aspect it is important to point the execution order of these eventHanlder methods. From the View angle all event handlers must execute synchronously. Although this seems just the opposite we want to achieve, as View are so related with the user interface, this is correct.<br>The reason of this is because side effects wont be handle by Views. In order words, if an action require a XHR call, this will be done by the Store (backbone model) and not the View. And if the View is re-rendered during the XHR being processed, the Store will be responsible to have some property to indicate that is prepossessing, so when the View renders will indicate it.</p><p><strong>Final join</strong>. For the two aspects to work as expected one union point is missing. The Template generate HTML that allow users to interact with, and the View has event handlers to process inputs. But in no point the View indicate to the Template what thing can handle.</p><p>For this, the recommendation is that the View in the <em>getUserInterfaceState</em> method also return the list of selectors that can handle. Thereby the Template can change to locate an event trigger element from one place to another.</p><p></p><p>Finally, a part from this two main aspect I can visualize 2 more miscellaneous considerations.</p><p>The name convention that standardize each of the previous mentioned points. The easier to read the code and the more information we can provide in the more consistent way the better. This relieve the developer to innovate with fancy names and overblown ways to split View methods.<br>My proposal on this:</p><ul><li><em>bindEventsOn: </em>Only View's method responsible to bind Store events with View render method.</li><li><em>bindEventsOff:</em> Counterpart of the previous method to unbind events. A good alternative can be one single method called <em>bindEvents </em>that accepts a Boolean parameter indicating if must bind or unbind from Store's events.</li><li>xXXXHandler: All method that are event handlers (these are the ones pointed by the events property of Backbone itself). Example: <em>addToCartHandler.</em></li></ul><p>For more details over name conventions and standardization over classes names, please read Code-Code contract.</p><p><strong>State Lifecycle</strong> is another aspect that need to be mention. Please notice that in this contract there is not reference to when or how Store are created or initialized, this is on purpose as the View is not responsible for such a task. From the View perspective Stores will exist and share the same lifecycle as the View that contain it.</p><h4 id="benefits-5"><span id="anchor-59"></span>Benefits</h4><ol style="list-style-type: decimal"><li>If we decide to change how our application is being rendered it will be just a matter of changing the user interface used for our templates. For example start using Virtual-DOM, JSX or any other representation of the View state.</li><li>Testability will easier but not complete until jQuery events gets replaced.</li><li>Views are not allowed the access outside its own $el. Because Views MUST NOT know any existence of a DOM or any other concrete browser interface. Even access its own <em>$el</em> should be an exceptional action. This make the View more easy to update.</li><li>The use of jQuery must be reduce as much as possible on Views.</li><li>Tracking changes and debugging errors could be extremely simple and even automated. It would be just a matter of tracing Store changes events. </li><li>Changing a View' State wont require to know how it is implemented or works.</li><li>Enable the handling of the default user interface state of any View in a generic way.</li><li>Views will be light and decoupled of Stores increasing testability and reuse of code.</li></ol><h4 id="extensibility-5"><span id="anchor-60"></span>Extensibility</h4><p>As this interface will so used along our applications, the extensibility point is particularly important.</p><p>I will present a use case as a guide to explain how this interface must be extended. Before you read please notice that could be some parts that are not strictly part of the current interface but do are related with.</p><p>The example is: How to add a new Widget into the home view.</p><p>The first thing to understand is what our widget really is and what it need.<br>Our widget will need to render something and probably it will need to interact with the user through the rendering output. In other words, the widget will require a Template and a View.<br>As in any standard View and Template, the View of the widget will be responsible for handling the interaction with the Store and the user representation and the Template of the widget will be responsible for convert a Store object into a user interface. Please notice the widget is just an ordinary View and Template, and as a such must be defined a standard module.</p><p>On the other hand, the first thing the customizer will do will be decide WHERE the widget will be rendered. As we have state before this is a responsibility of the Template of the Home, so in one way or another the template will be edited.<br>Unfortunately templates are just simple text files that does not allow the installation of plugins, the only way to extend a template is overriding it or editing it direclty.<br>This point indicate that we need to create an Extension Module for the Home, that will contain the overriding Template.<br>Knowing that we need to indicate where the widget will be added and that the widget is an ordinary View, we must specify a tag in the template to achieve this (some backbone plugins use data attributes like data-view or data-child).</p><p>Although it is not describe in this document, the previous mention attribute change the standard rendering flow by searching for child views inside the View. Let define <em>childViewsContainer </em>property in the View that contains this information. This means that we will need a way extend the default value of this property to add our widget.</p><p>For this all Views must provide an extensibility mechanism to add new child view without needing to override nor extend anything. It is nothing else than defining a Plugin in the View.</p><p>There is not better place than the Extension Module defined to override the Template, to install this child-views plugin. I would recommend in the front-end entry point of this module.</p><p>From all the previous we can conclude:</p><ol style="list-style-type: decimal"><li>We have the widget defined in its own module. Independent of where and how it will be added in the final application. This mean that one team can add new functionality without worrying of breaking any widget.</li><li>The Home module does not suffer any edition, extend or logic override, which make the customizer work safer.</li><li>All the customization are placed in one place. One place to find extra logic, one place to install plugin per module, and one place to override templates.<br>Leaving aside the fact the template need to be overridden, everything else are benefit of this architecture.</li></ol><h4 id="examples-5"><span id="anchor-61"></span>Examples</h4><p>An example could be a Payment page where all context information is given to the Template through the <em>getUserInterfaceState</em> function and the interaction are handle in standard handle methods.</p><p></p><h3 id="view-store-contract"><span id="anchor-62"></span>View-Store Contract</h3><h4 id="overview-6"><span id="anchor-63"></span>Overview</h4><p>The intention of this contract is to define the communication of between the View and its state container, the Store.</p><h4 id="purpose-6"><span id="anchor-64"></span>Purpose</h4><ul><li>Trace a line between Views and Stores.</li></ul><h4 id="content-7"><span id="anchor-65"></span>Content</h4><p>As we expressed before, Views are all about data flows and information transformation, where in one extreme is the user interface and in the other the Store.</p><p>This means that Stores does not know the source of the update, which helps them presenting a very simple interface.<a href="#fn8" class="footnoteRef" id="fnref8"><sup>8</sup></a> Good Stores will provide methods and properties to the View that update its inner state.</p><p>So the keys here are: a) understand that this is an API that alter some state b) make utterly explicit the aim of each action of this interface.<br>I believe that this can be achievable by stabling the following rules:</p><ol style="list-style-type: decimal"><li>All method must be called in the form of: <em>verb Noun</em>. Where the verb express the action that will be performed, like update, remove, reset, etc, and the Noun is the property or properties where the action will be applied. For instance: <em>removeAddress</em>, <em>changeCountry</em>.</li><li>The Noun of the first point must be a property of the Store.</li></ol><p>Clearly this convention is a workaround of the fact that the API produce side effects that are not explicit (on the other hand each of these methods could return a dictionary with the new and old values).<br>This is an effective and simple approach to update a Store with minimum knowledge about them.<br>Another tool that can be used by Stores is trigger events for the modified property.</p><p>Although previous drawbacks already expressed, the creation of unit tests is achievable.</p><p>Please refer to the Stores section for more details on this topic.</p><h4 id="benefits-6"><span id="anchor-66"></span>Benefits</h4><ol style="list-style-type: decimal"><li>As Views will are light, generate traceability over the actions performed by the final user will be much more easier (perhaps extending View.prototype to log each user interface action).</li><li>Stateless Views.</li><li>Stores will behave similar than Backbone Models (use them if you consider appropriate).</li><li>Stronger division between front and back-end thanks that Views wont know the existence of the back-end nor even the network interface.</li></ol><h4 id="extensibility-6"><span id="anchor-67"></span>Extensibility</h4><p>As this contract first aim is indicate the role of each of the involved agents, the extensibility perspective lose sense. However it is valid to say that any new method over the Store interface is an extension of this contract.</p><h4 id="examples-6"><span id="anchor-68"></span>Examples</h4><p>Given a View that has expanders/accordions that can be collapsed or expanded used to show more details about the current user, changing this state would be a matter of calling a method like: <em>toggleUserInformation().<br></em>When the View is being rendered, any Store's property, like <em>userInformationExpanded,</em> would be read and the final user interface update accordingly.</p><p></p><h3 id="view-child-views-contract"><span id="anchor-69"></span>View-Child-Views Contract</h3><h4 id="overview-7"><span id="anchor-70"></span>Overview</h4><p>Define the mechanism to compose Views.</p><h4 id="purpose-7"><span id="anchor-71"></span>Purpose</h4><ul><li>Establish the roles of each View involve.</li><li>Model the interaction between Views and Child Views.</li></ul><h4 id="content-8"><span id="anchor-72"></span>Content</h4><p>As we have claimed before, each agent involved is responsible for one single thing; in this case Views to handle interactions.</p><p>From a very practical perspective we can apply this simple principle of single responsibility to a large code base and conclude that each time we need to show/handle certain portion of user interface we must use the same single View.<br>In fact this observation leads us to very common concepts, which are composition and code re-usability.</p><p>In the context of a View this means create Views that handle commonly repeated pieces of code (responsibilities). These Views will be called Child Views (please take into account that this is more a justification for marionette composite view than a new concept).</p><p>Any View can be consider as a Child View, as the only condition to be a one is to be used by another View.<br>The composer View, from now on the Parent View, will be who indicate what are its components, as these are in fact just part of the Parent View that were removed away for the sake of simplicity.<br>In any case it is worth noticing that Parent Views must not know about internal implementation details of it Child Views. This is so because each View is a “class” and as such encapsulate state and computation from the rest of the system.</p><p>To clarify any valid communication between a Parent View and a Child View, this must fulfill the following rules:</p><ul><li><em>Child Views will not know about it Parent View</em>. One can feel tempted to do this, as a Child View “<em>is part of the Parent View that was removed to avoid duplicated code”</em>. However, if our aim is reach re-usability and maintainability this will fight against us.</li><li><em>Parent Views will only know how to create new Child Views and anything else about its Child Views</em>. This means the Parent Views will know how to create a Store to each Child View. This should be a simple task like passing a particular Store's property to the Child View constructor, although certain basic computation is understandable.</li><li><em>When some communication is required, share the Store among child Views</em>. This mechanism of communication place naturally after agree with previous contracts.</li></ul><p>In order to have a clear understanding of this topic let see some examples:</p><p>Given the scenario of master-details information page, let say an Invoice Details page (master) and the list of its items (details). How the CRUD of items is performed?<br>Firstly, we identify a Store for the entire page, one Parent View to show all the details of the Invoice and a list of Child View called items.</p><p>The simplest cases are those when any edition is performed over the Parent View (master), where the data flow is not other rather than the one defined in View-Template Contract.</p><p>For the items the first thing we identify is that every user interface aspect with will be controlled by the item's Template, as it has the responsibility to present the content obtained from the View's <em>getUserInterfaceState</em> method.<br>By accepting this and understanding the communication rules, it is easy to see that the event handlers for any user interface request from the item will be handle by the item's View. This interaction will ending invoking a method in the Child View's Store.</p><p>It is of paramount importance to realize that:</p><p>Parent View and Child Views share a common Store.</p><p>This conclusion allows us to re-write the communication rules to: </p><p>All Parent View – Child View communication will be performed through the shared Stored in a decoupled way. Which allows child views to re-render by listen to those event in the store that they care about.</p><p>When the main components are in place, we can pay attention to some technical details:</p><ul><li><em>Dependencies</em>: If the Child View is internal of the current module, it will be required in the same way any other internal file is requested, by using require.<br>If the view is an external component (from another module) it will be injected as any other module dependency and the Parent View will be responsible to instantiate the Child View but not know WHAT View is instantiating.</li><li><em>Collection View</em>: Along the description of this contract we have not mention, on purpose, particular responsibilities like iteration. A Collection View must exists to handle the responsibility of iterate over a collection.<br>Thankfully this View already exists on frameworks like marionettejs.</li><li><em>Constructor and Destructors</em>: From the Parent View perspective its Child Views are always the same instances. Parent Views only instantiate new Child Views when it is first rendered.<br>This is the reason why views like 'Collection View' are so critical, as they must take into account the details of creating and destroying new Child Views when the passed in collection change.<br>Again, the Parent View will only see the single instance of the Collection View itself, and the rest of the process will be encapsulated by the Collection View.</li><li><em>Event Handlers</em>: As we have described before Child Views should only attach to the user representation inputs (events). Perhaps there could be some particular case where Child Views can also attach to Store events, but this must be address carefully as it make the Child View harder to be reuse.</li></ul><h4 id="benefits-7"><span id="anchor-73"></span>Benefits</h4><ol style="list-style-type: decimal"><li>Updating component Views (those that are module agnostic) should really easy, as Parent View wont really know what concrete external view are using.</li><li>The memory consume will be minimum as Child Views will be created only once per View showed and only latter re-rendered.</li><li>View code more maintainable.</li></ol><h4 id="extensibility-7"><span id="anchor-74"></span>Extensibility</h4><p>Adding new child views plays an important part for the work of any dev, for this all Views must offer plugins to add extra child view without needing extend the parent view nor override it.</p><h4 id="examples-7"><span id="anchor-75"></span>Examples</h4><p>An Invoice details Page. This page shows all the details of an Invoice, like in any standard View it show information, and show the list of Items it has. If you want to change the child view used to render the invoice's items, you should only change the injected component view to another that expected the same Store interface.</p><p></p><h1 id="stores"><span id="anchor-76"></span>Stores</h1><h2 id="definition-3"><span id="anchor-77"></span>Definition</h2><p>This is the world I use in this post to describe:</p><p>“A generic purpose data container.”</p><p>We will used it to differentiate between user interface state and Backbone Models, in other words Front-end facing state and Back-end facing state.</p><p>This concepts is necessary to maintain View clean and decoupled from the user interface state.</p><p>Notice that Backbone.js makes an excellent job by offering Models, Views, Collection and Routers. But we will need to model this difference between front-end and back-end state specially in the case of business apps.</p><p>Regarding the user interface state, along the history lot of stateless frameworks that does not take into account the state as a part of it, have been created. Reason why they all end it up falling. Just to mention some: All the XUL family, JSF, ASP.NET Forms, etc.</p><p></p><h2 id="components-3"><span id="anchor-78"></span>Components</h2><p>From its definition any state can be put inside a Store, which in fact is the aim.</p><p>But in order to make the state manageable we identify two parts:</p><ul><li><strong>User interface state</strong>. Hold values like if an accordion is collapsed or not. These can be any property</li><li><strong>Back-end entities representation</strong>. These are our Backbone models.</li></ul><p></p><h2 id="contracts-4"><span id="anchor-79"></span>Contracts</h2><p>There is no contract Store-Model as Models are part of the Stores. Neither Store-Backend Service as Stores are general-purpose data container, it will be the related Model who knows about a back-end service.</p><p></p><h3 id="client-store-contract"><span id="anchor-80"></span>Client-Store Contract</h3><h4 id="overview-8"><span id="anchor-81"></span>Overview</h4><p>This contract formalize, from the Store point of view, how to interact with it.<br>In the following text the term client denote any consumer of a Store.</p><h4 id="purpose-8"><span id="anchor-82"></span>Purpose</h4><ul><li>Define the basic interface any Store must fulfill.</li></ul><h4 id="content-9"><span id="anchor-83"></span>Content</h4><p>Every Store most present a clear interface that leave totally clear what are the side effects of every action performed. In other words, we need to understand we are modeling a <strong>state</strong> API.</p><p>There will be two possible interactions, read the state and update the state of the Store.</p><p>To read any property I recommend be aligned with the Backbone.js API, use <em>get </em>methods. Idem for simple variables updates, use a <em>set </em>method.</p><p>For more complex edition, let say, add an item into the cart, the idea will be the same as the one expressed in the View section, use method in the form <em>verb Noun</em>, like <em>addItemToCart</em> or <em>removeAddress</em>. In these cases a property with the name of the noun must exists on the Store.</p><p>Notice here that it is not recommended to update internal properties of the Store directly. Although this can seems the right way to do it, this leave Stores without way to know when something change (in other words, use the method / API).</p><p>As the Store does not care who is its client it must indicate what are the side effects when an updated is performed.<br>I would recommend two possible ways, on each invoked method return the list of values altered, or in the same way Backbone.js does, trigger an event for each property's value changed.</p><p>The final point to describe is the usage of Stores. In most cases Stores, as a single unit, are single purpose, while Backbone Models are general purpose, as they can be used between modules or many times in the same module (the same back-end entity can be used for many reason in the front-end, for example a product).</p><h4 id="benefits-8"><span id="anchor-84"></span>Benefits</h4><ol style="list-style-type: decimal"><li>Controlled side-effects on the execution.</li><li>Easy to centralize the edition of the user interface state. For instance, show by default collapsed all expander controls.</li><li>Easy to debug applications.</li></ol><h4 id="extensibility-8"><span id="anchor-85"></span>Extensibility</h4><p>As JavaScript is not a strong type language we can add extra method into the Store freely.</p><h4 id="examples-8"><span id="anchor-86"></span>Examples</h4><p>By using Stores you will be able to use a Store-factory and in this way apply application-wide setting, like in mobile all accordions are collapsed by default.</p><p></p><h3 id="store-factory-contract"><span id="anchor-87"></span>Store-Factory Contract</h3><h4 id="overview-9"><span id="anchor-88"></span>Overview</h4><p>In the context of this new Store entity I can envision the need of create another associated agent, a Store Factory. A Store Factory will be a class responsible to generate new instance of Stores.</p><h4 id="purpose-9"><span id="anchor-89"></span>Purpose</h4><ul><li>Define a generic way to create new Stores.</li><li>Localize the agent responsible for create new Stores.</li><li>Centralize all common and standard user interface state properties.</li></ul><h4 id="content-10"><span id="anchor-90"></span>Content</h4><p>This contract proposes the creation of a new Store Factory.<br>A Store Factory will be a Singleton class responsible for create new Stores. The aim is unify all user interface properties along your app. So this Store Factory wont necessary require a Model to create a new Store, anyway it represent an excellent place to inject mock model when necessary (unit test context).</p><p>In the context of our business app the vast majority of clients a Store Factories will be Routers, as they are the responsible to instantiate new Views, moment when Stores are required.</p><p>It is important to understand that this is a new concept that try to handle part of the problem of State Management, so in this contract there is not implementation details nor low level specifications. However, in my humble opinion the Store API could be something as simple as the following:</p><p>Factory.createStore(ViewClass, [Mode], [Extra_Properties_Object]) ::= Store</p><p>The Store will have at least one single method responsible to create new Stores, that will accept a View class, which will be mandatory, an optional Model instance and an optional object with extra user interface properties.</p><h4 id="benefits-9"><span id="anchor-91"></span>Benefits</h4><ol style="list-style-type: decimal"><li>Unified mechanism to change cross-module user interface properties.</li><li>A standardization from UX teams (if you have any) on the most common user interface properties could help a lot.</li></ol><h4 id="extensibility-9"><span id="anchor-92"></span>Extensibility</h4><p>I do not have a strong opinion on this, but a good starting point could be dependency injection container. Take them as an example to register a new association between Views and Stores. Please remember that our unit of work are Modules.</p><h4 id="examples-9"><span id="anchor-93"></span>Examples</h4><p>Stores are created, generally, when Views are created to render some content. In this scenario Routers will be responsible to call this Store Factory and pass the resulting Store to the new View.<br>For this almost any View called from a Router is a good example, for instance the User Profile page that render the user details accordion and need a Store to save its state.</p><p></p><h1 id="models"><span id="anchor-94"></span>Models</h1><h2 id="definition-4"><span id="anchor-95"></span>Definition</h2><p>Models currently are client side representation of back-end records (tables, documents, whatever you use).</p><p>Let see some definitions:</p><p><em>Backbone</em> “<em>Models are the <strong>heart</strong> <strong>of any JavaScript application</strong>, containing the <strong>interactive</strong> <strong>data</strong> as well as a large part of the <strong>logic</strong> surrounding it: conversions, validations, computed properties, and access control. You extend Backbone.Model with your domain-specific methods, and Model provides a basic set of functionality for managing changes.</em>”</p><p>Based on this Backbone definition and the general idea expressed along this document, I feel attracted by this definition. In the context of our app I would define a Model as: extended client side representation of your back-end records.<br>Understanding by <em>extended,</em> that this classes posses all the method strictly related with the data they have, for example, the ability to add new items into the Model's Cart (method <em>addItemToCart</em>).</p><p></p><h2 id="components-4"><span id="anchor-96"></span>Components</h2><p>Before listing Model's component, it is important to notice that Collection (backbone collections) are not analyzed in this documents as they only represent a particular use case for a Model, they represent a utility class rather than an architectural choice.</p><p>In simple scenarios Models will be only composed why its inner properties, but in more complex cases a Model can be composed by other Models and other Collections.</p><ul><li><strong>Inner Models</strong>. In this point Collections are consider.</li><li><strong>Simple properties</strong>. Canonical case of attributes (backbone inner property)</li></ul><p></p><h2 id="contracts-5"><span id="anchor-97"></span>Contracts</h2><p>Take in mind that not Model-View contract will be presented as the state related with a View will be accessed through a Store.</p><p>As the my experience indicate, 99% of the time all business app are data centric. For this reason I strongly recommend using any OData-like backend service.</p><p>Finally, notice that the bootstrapping of data model is being handle by the Module section of this document.</p><h3 id="model-service-contract"><span id="anchor-98"></span>Model-Service Contract</h3><h4 id="overview-10"><span id="anchor-99"></span>Overview</h4><p>Formalize the single data entry point for all you app.</p><h4 id="purpose-10"><span id="anchor-100"></span>Purpose</h4><ul><li>Centralize all network accessed</li><li>Unify client-server communication</li></ul><h4 id="content-11"><span id="anchor-101"></span>Content</h4><p>Although I assume a OData-like end-point as the main back-end data service, there could be cases where the back-end interaction will be more based on actions than data operations, for which reason this contract try to be as generic as possible.</p><p>Based on our Models definition, they are client side only, which means that all the information needed to understand, create or edit a Model must be in the client. For this reason is that the list of properties, default values and the queries applied to obtains this information must belong to the client Model.</p><p>Apart from this considerations, having a back-end url, back-end query, and so on, a Model is just Store used with a particular purpose.</p><p>I wouldn't recommend any new API on this, just use the <em>defaults</em> property already provided by Backbone and regarding queries use any Odata-like framework.</p><p>Finally, I conclude that model are the only agent in all your app that will be able to interact with the network interface. If there is a case where some interaction with the Back-end is needed which is not data-based (for example send an email from the client-side) a new agent to handle this cases should be created.</p><h4 id="benefits-10"><span id="anchor-102"></span>Benefits</h4><ol style="list-style-type: decimal"><li>One place to define data used to populated front-end models.</li><li>Better documentation, as each module define its data structure and default values.</li><li>One place to handle all network requests. This is very important, because it will enable the creation of new features, like client side cache by using service-proxies.</li></ol><h4 id="extensibility-10"><span id="anchor-103"></span>Extensibility</h4><p>Thanks that all data request specification is in the client side and the back-end is a generic query service, extend it is just a matter of update the front-end model. I recommend add plugins for this, so other devs can execute code on “pre-loading” data and “post-loading” data without need to override any module.</p><h4 id="examples-10"><span id="anchor-104"></span>Examples</h4><p>Search among all user order. In this case the View will fetch the related model and the model by using its internal odata-like query will retrieve the list of user orders.</p><p></p><h1 id="code"><span id="anchor-105"></span>Code</h1><h2 id="definition-5"><span id="anchor-106"></span>Definition</h2><p>This section analyze code as if it were a generic interface, trying to formalize those aspect that affect to all classes, models and so.</p><p>This section does not describe style related aspect, as the aim of this section is model the interaction between pieces of code, no how the code looks like.</p><p>The main aim is define a standard interface to be used along all your products, so when a new piece of code is released by you company any dev will feel comfortable and know how to update the code base.</p><p></p><h2 id="components-5"><span id="anchor-107"></span>Components</h2><p>Although it can seem silly it is important to understand that the following list helps to or directly define an interface, so they must be treated carefully.</p><ul><li><strong>Generic Classes</strong>: Any utility class.</li><li><strong>Predefined Classes</strong> (Store/Models, Views, Routers, etc): Any of the previous described components</li><li><strong>Events</strong>: These have not been analyzed too much but also represent an important part of any code interface.</li></ul><p></p><h2 id="contracts-6"><span id="anchor-108"></span>Contracts</h2><h3 id="code-code-contract"><span id="anchor-109"></span>Code-Code Contract</h3><h4 id="overview-11"><span id="anchor-110"></span>Overview</h4><p>This contract formalize the generic API aspect of any piece of code inside your app.</p><h4 id="purpose-11"><span id="anchor-111"></span>Purpose</h4><ul><li>Allow third parties to safely edit our code.</li><li>Provide guidelines on how to define generic code APIs.</li></ul><h4 id="content-12"><span id="anchor-112"></span>Content</h4><p>Let start by recognizing that each of the previous component define an interface or API. This can seem a bit unclear, as this generic approach is hard to control or automate, but from the consumer of the code there is always an interface to interact with.</p><p><strong>Method aims</strong>. As in the majority of cases we interact in an imperative way, by calling method, each of them must leave totally clear in its name what its aim, what are the side effect of calling it.</p><p>Each method most perform one and only one action, which internally can be decompose into multiples small tasks (composition is an excellent approach).</p><p>Please refer to the other sections on this documents to read about the recommend method names in each case.</p><p><strong>Method documentation</strong>. Some times the method name is not enough to express all that it does, this is why an excellent documentation is mandatory to <strong>ALL</strong> not auto-generated methods.<br>Documentation is not just a piece of obvious text above a method name, but a clear and concise description of the action performed, the types accepted and the types returned. Those latter points are extremely important, do not forget we develop in a dynamic type language, so saying that a method returns Object is not very valuable.</p><p><strong>Method accessibility</strong>. Developer must know what method are safe to use (or less probably that they change in the next release of your app). This will help you a lot when your code is in production and new devs start editing the code base.</p><p>I propose use two kind of names:</p><ol style="list-style-type: decimal"><li><em>Public method</em>: These are the recommended to be used by any dev. So they must be very concrete and simple, and they will be preserve, as much as possible, during different version of your code.<br>As the aim of these method is present a public API, each of them most allow the installation of plugins where I recommend at least the following two: <em>pre&lt;Method_Name&gt;Execute</em> and <em>post&lt;Method_Name&gt;Execute</em>.<br>Perhaps throwing <em>pre</em> and <em>post</em> event can also be very useful for devs that want to extend your code.<br>It is very interesting to notice that a good use of this convention will help a lot to provide a clear semver versioning structure. When any of the public method is edit in such a way that is not legacy compatible any more, a new mayor version of the module must be created.<br></li><li><em>Private method</em>: These method are used and controlled by the author of the code. To distinguish these from the public ones, they must start with an underscore, like <em><strong>_</strong>validateItemOption</em> for instance.<br>These method wont offer any plugin at all, and can change or even disappear from one version to another.</li></ol><p>A good semver structure on our modules, plus a well followed code standard like this, will make the life of our devs much more easier. Allowing them to know which customization is still valid or not, what code can be edited safe and be able to extend.</p><p>Generally, we can see how by defined a short group of clear rules, we can provide a lot of meta-data per method; what is does, how can we edited, how safe it is to edited, etc.</p><p>This is very useful, if a Router need to invoke method in a View it will know that must use public methods.</p><h4 id="benefits-11"><span id="anchor-113"></span>Benefits</h4><ol style="list-style-type: decimal"><li>Code easy to extend.</li><li>Customization will be more easy to preserve during different version of you app.</li><li>Meta-data expressed on each method.</li></ol><h4 id="extensibility-11"><span id="anchor-114"></span>Extensibility</h4><p>Generally all public methods must provide extension point, plugins, where its default execution flow can be edited. This is of paramount important if we want devs extend our code safely and without coupling their code to one concrete version of your app.</p><p>When the context justify, the use of events is an excellent options, always namespacing them to identify the module, file, and method.</p><p>The idea here is very simple, have decoupled that is easy to update, NOT wrap method and use clear interfaces.</p><h4 id="examples-11"><span id="anchor-115"></span>Examples</h4><p>If a new feature to trace the entire execution of an order wants to be created, thank to this contract it will be easier and clear what and how to trace. It will be just a matter of installing the corresponding plugin just for the public methods on the selected classes.</p><p>This trace example can be generalized to almost any meta-feature or aspect that wants to be created cross-module. This things generally are very hard to accomplish lack of a clear and unified API across the code.</p><p></p><h1 id="routers"><span id="anchor-116"></span>Routers</h1><h2 id="definition-6"><span id="anchor-117"></span>Definition</h2><p>In the context of this post Routers are being used to link URLs to function execution.<br>This definition is so generic on purpose, because I don't have any rule nor guide on how Router should behave.</p><p>Let see some definitions of Routers:</p><p><em>Backbone</em>: “<em>Backbone.Router provides methods for routing <strong>client-side pages</strong>, and <strong>connecting them to actions</strong> and events. For browsers which don't yet support the History API, the Router handles graceful fallback and transparent translation to the fragment version of the URL.</em>”</p><p>I personally would define a router as a class responsible for linking a URL with an Inversion Of Control mechanism which is aiming to instantiate new Views.</p><p></p><h2 id="components-6"><span id="anchor-118"></span>Components</h2><p>Based on the Routers definition we can easily observe the following components:</p><ul><li><strong>Views</strong>: Router will link URLs to logic and the aim of this logic is show Views. So Views must be known by Routers.</li><li><strong>Store Factory</strong>: In order to instantiate a View a Store is needed and so a Store-Factory.</li><li><strong>Models</strong>: In order to instantiate a View a Store is needed, and in the vast majority of cases a Model is also required.</li></ul><p></p><h2 id="contracts-7"><span id="anchor-119"></span>Contracts</h2><h3 id="router-navigation-contract"><span id="anchor-120"></span>Router-Navigation Contract</h3><h4 id="overview-12"><span id="anchor-121"></span>Overview</h4><p>This contract try to make clear what is the relation between URL and Routers.</p><h4 id="purpose-12"><span id="anchor-122"></span>Purpose</h4><ul><li>Formalize the creation of Backbone Routers.</li></ul><h4 id="content-13"><span id="anchor-123"></span>Content</h4><p>A good starting point to understand this contract is remembering the way input requests came from the user presentation to the View's handler method.<br>For Router, the request come from the browser that update its URL (it is irrelevant who trigger this event) which generates the call of a Routers' method. Until here, this is just Backbone specifying URLs in the <em>routes</em> property.<br>In the same way that Views has a name convention, I propose that all method that are called in a Router when a URL change, navigation method for short, were prefixed with the words navigateTo and follow the structure:</p><p>navigateTo &lt;View Type&gt; [option]</p><p>The prefix will distinguish the navigation method from any other method in the router, View type will indicate what will be called, for example <em>list</em>, <em>edit</em>, etc. Finally, an optional suffix for those cases where the navigation will show a page with a very particular aim, for example <em>navigateToListClosed</em> to difference between a list of closed invoices from a list of open ones.</p><p>To sum up, this is the only place is all the our code base, where the URL should be read. </p><h4 id="benefits-12"><span id="anchor-124"></span>Benefits</h4><ol style="list-style-type: decimal"><li>Router must be easy to unit test.</li><li>It will be easy to know what method are routes handler.</li></ol><h4 id="extensibility-12"><span id="anchor-125"></span>Extensibility</h4><p>Extending this contract can be seen in two ways; just add a new router to your Backbone.Router or extend the Backbone.Router code to allow a wider API.</p><h4 id="examples-12"><span id="anchor-126"></span>Examples</h4><p>Any standard Backbone.Router formatted as expressed above is a good example.</p><p></p><h3 id="router-view-contract"><span id="anchor-127"></span>Router-View Contract</h3><h4 id="overview-13"><span id="anchor-128"></span>Overview</h4><p>Formalize how and where Views must be created.</p><h4 id="purpose-13"><span id="anchor-129"></span>Purpose</h4><ul><li>Clarify the process in which new Views are instantiated.</li></ul><h4 id="content-14"><span id="anchor-130"></span>Content</h4><p>From the reading of the Router definition we can see that it will be the agent responsible to instantiate Views and inject on them all needed information. For this reason is that Routers must apply the Inversion of Control pattern, by injecting into Views, Stores, Model and any other require parameter.</p><p>I leave under consideration of the reader evaluate that Router also pass into View the instances of the Children Views, achieving in this way really single one place where Views are created. Having this would allow the creation of Factories Views, usage of Dependency Injection Container, decouple Factories, etc.</p><h4 id="benefits-13"><span id="anchor-131"></span>Benefits</h4><ol style="list-style-type: decimal"><li>Single point where Views (not Children Views) are instantiated.</li></ol><h4 id="extensibility-13"><span id="anchor-132"></span>Extensibility</h4><p>I am not really sure if it is worthy, with in the methods that handle navigation you could add plugin so external views can intercept this processing and even change the instance of the view that will be instantiated.</p><h4 id="examples-13"><span id="anchor-133"></span>Examples</h4><p>The rendering of any View is a good example for this contract.</p><p></p><h1 id="tools"><span id="anchor-134"></span>Tools</h1><p>If you are developing a business application you will want to expend the most of your time adding value to your customer, not memorizing all this rules. For this to be true, you will need a nice set of tools to accomplish this.</p><p>I wont give any particular recommendation, but take into account yeoman to create generator for your modules and any part of them. Gulp/grunt to define custom tasks that validate the name conventions, JSCS, JSLint, etc, etc.</p><p>The only thing to point out; plan in advance the creation of this tools, you will need them.</p><p><strong></strong></p><div class="footnotes"><hr><ol><li id="fn1"><p>https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)<a href="#fnref1">↩</a></p></li><li id="fn2"><p>I would accept an extended JSON format to accepts comments, short-jsdoc is preferred.<a href="#fnref2">↩</a></p></li><li id="fn3"><p>From now on the term “user interface” will be use, as the initials UI are generally used to refer to some graphical framework, like DOM, GTK or some other.<a href="#fnref3">↩</a></p></li><li id="fn4"><p>I wont talk about models here, because Models in the business apps are related with the back-end state representation, and in this case a store refer ANY state represented in user interface, like the state of a collapsible accordion. <a href="#fnref4">↩</a></p></li><li id="fn5"><p>I am not explaining here how Stores are created, but clearly having a Factory is great idea.<a href="#fnref5">↩</a></p></li><li id="fn6"><p>Notice the use of the term request and input are interchangeable, and there is not mention to events nor DOM element on purpose.<a href="#fnref6">↩</a></p></li><li id="fn7"><p>Please revise the last version of Backbone where this hard dependency with jQuery has been removed<a href="#fnref7">↩</a></p></li><li id="fn8"><p>Consider the difference with the View-Template interface where knowing about jQuery event is mandatory.<br>Update: This is not longer true with the latest version of Backbone.<a href="#fnref8">↩</a></p></li></ol></div>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Why I still care about Backbone JS</title>
      <link href="/2016/01/23/2016-01-23-why-i-still-care-about-backbone/"/>
      <url>/2016/01/23/2016-01-23-why-i-still-care-about-backbone/</url>
      <content type="html"><![CDATA[<h1 id="State-of-the-Art"><a href="#State-of-the-Art" class="headerlink" title="State of the Art"></a>State of the Art</h1><p>I may start talking about those brand new super cool frameworks we all know and use.<br>Let’s face it, the current state of the art of the JavaScript world is really nuts, fashion and exciting all mixed together in a weird way.<br>You must create amazing-looking websites if you want to be trending. And you must do it fast and in a fancy way, whatever that means.</p><p>Why Angular became so popular when it was released in the market?, leaving aside the fact it has the Google support. Because it is easy to use! and in some cases it laverage concepts from other frameworks. Before I continue I must admit I have just made really simple demos on Angular.</p><p>I haven’t read any blog post about how to apply <a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design\" target="_blank" rel="noopener">SOLID</a> ) principles on Angular apps, how to use Vanilla JS without having to learn a new Google-invented <a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener">DSL</a>.<br>If am forced to model/architecture my code using concepts, like “directives” that does not reflect any of my domain problems nor the underlying technology (JavaScript), I start doubting about if it is the best approach.</p><p>Perhaps at this point you are thinking that I am another newbie that couldn’t understood the concept of a directive in Angular or I just prefer Ember or whatever.<br>Let revise the near history:</p><ul><li>Google first announced Angular (Lots of people went crazy thinking that it was the framework to solve it all).</li><li>Facebook released React showing an alternative way of <a href="https://en.wikipedia.org/wiki/Web_browser_engine" target="_blank" rel="noopener">rendering</a> HTML.</li><li>Google had to start from scratch only to change they render engine (Welcome Angular 2)!</li></ul><p>Correct me if I am wrong, but that does not sound like a good architecture…</p><h1 id="Separate-the-wheat-from-the-chaff"><a href="#Separate-the-wheat-from-the-chaff" class="headerlink" title="Separate the wheat from the chaff"></a>Separate the wheat from the chaff</h1><p>I am not against Angular nor Ember nor any other popular framework.<br>What’s more, I think that competition and the fact that big companies are investing on JavaScript frameworks is awesome and promotes innovation. Don’t get me wrong.<br>But in all this buzz we developers need to take the best of each and in particular learn from the concepts rather than the concrete implementations.<br>If you read my blog you will realize that I only care about the pursuit of the excellence in code, not if it is easy, fancy or a trending company is behing certain library.<br>The fact that with 3 lines snippet code you can do a double binding is not enough to catch my attention.</p><h1 id="What-makes-Backbone-a-player-nowadays"><a href="#What-makes-Backbone-a-player-nowadays" class="headerlink" title="What makes Backbone a player nowadays?"></a>What makes Backbone a player nowadays?</h1><p>In one word, simplicity. Backbone only provides those things that almost every app needs.<br>For sure you will need to handle state, let’s call it Model, you will need to interact with the user, let’s put this responsability in Views, and finally as in any SPA you will need to handle URLs, Routers will handle this.<br>This may sounds poor or does not cover all cases. Of course it does not!, each app is a different world, made by different people and solves different problems.<br>Besides, this allows to create a common language with non-technical people. When a developer refers to a Deposit Model it will be easy for a salesman to understand what we are talking about.</p><p>Regarding rendering Backbone does not provide a rendering engine nor a recommendation of how to tackle this, only gives you a simpe empty render function.</p><p>Frameworks must provide generic solutions, not concrete recipes.<br>I work in a big eCommerce SPA app based on Backbone. When I learnt about Virtual-DOM, thanks to the Facebook’s guys (ReactJS), apply it to our app was just a matter of converting our templates from Handlebars to Virtual-DOM and update our View.render function. Without having to re-architect all our app we were able to take advantage of Virtual-DOM!<br>BTW check this out <a href="https://github.com/Mictian/blueHTML" target="_blank" rel="noopener">blueHTML</a>.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Saying that Angular or any other library is good or bad is too simplistic. Simplify software engineering to “Backbone is better than…” is just nonsensical. We have more than 40 years of engineering, we have developed lot of patterns, principles, best practises, etc. Let’s not re-invent the wheel.</p>]]></content>
      
      
    </entry>
    
  
  
</search>
